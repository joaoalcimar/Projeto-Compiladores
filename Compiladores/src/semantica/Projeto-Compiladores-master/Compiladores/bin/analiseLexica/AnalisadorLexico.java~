/* The following code was generated by JFlex 1.6.1 */

package analiseLexica;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morgok/Desktop/Compiladores/Compiladores/src/analiseLexica/Linguagem.lex</tt>
 */
class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\73\1\101\1\101\1\73\22\0\1\65\1\20\1\0"+
    "\1\66\1\0\1\5\1\12\1\0\1\23\1\24\1\3\1\1\1\31"+
    "\1\2\1\22\1\4\1\77\1\56\1\61\1\60\1\62\1\76\1\57"+
    "\1\76\1\55\1\76\1\21\1\32\1\15\1\17\1\16\2\0\4\100"+
    "\1\70\1\72\10\100\1\71\1\64\3\100\1\67\6\100\1\25\1\0"+
    "\1\26\1\14\1\100\1\0\1\7\1\33\1\37\1\45\1\35\1\46"+
    "\1\50\1\41\1\10\1\100\1\36\1\47\1\6\1\11\1\42\1\51"+
    "\1\100\1\34\1\40\1\43\1\44\1\54\1\52\1\63\1\53\1\100"+
    "\1\27\1\13\1\30\7\0\1\101\32\0\1\75\u05bf\0\12\74\206\0"+
    "\12\74\306\0\12\74\u019c\0\12\74\166\0\12\74\166\0\12\74\166\0"+
    "\12\74\166\0\12\74\166\0\12\74\166\0\12\74\166\0\12\74\166\0"+
    "\12\74\166\0\12\74\140\0\12\74\166\0\12\74\106\0\12\74\u0116\0"+
    "\12\74\106\0\12\74\u05e6\0\1\75\u015f\0\12\74\46\0\12\74\u012c\0"+
    "\12\74\200\0\12\74\246\0\12\74\6\0\12\74\266\0\12\74\126\0"+
    "\12\74\206\0\12\74\6\0\12\74\u03a6\0\13\75\35\0\1\101\1\101"+
    "\5\0\1\75\57\0\1\75\u0fa0\0\1\75\u761f\0\12\74\u02a6\0\12\74"+
    "\46\0\12\74\306\0\12\74\26\0\12\74\126\0\12\74\u0196\0\12\74"+
    "\u5316\0\12\74\u0586\0\12\74\u0bbc\0\12\74\200\0\12\74\74\0\12\74"+
    "\220\0\12\74\u0116\0\12\74\u01d6\0\12\74\u0176\0\12\74\146\0\12\74"+
    "\u0216\0\12\74\u5176\0\12\74\346\0\12\74\u6c74\0\62\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\14\7\1\31\1\7\1\32\1\7\1\1\1\33"+
    "\1\34\1\35\2\0\1\36\1\37\1\0\1\40\1\0"+
    "\1\41\1\0\1\42\11\0\3\7\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\0\1\33\1\0\24\7"+
    "\1\62\2\7\3\0\1\31\2\7\14\0\1\7\1\63"+
    "\2\7\1\64\1\65\1\66\1\67\22\7\1\70\4\7"+
    "\1\71\3\0\2\7\14\0\1\72\1\7\1\0\11\7"+
    "\1\73\1\74\1\75\7\7\1\76\1\77\5\7\1\100"+
    "\1\7\1\101\1\7\1\0\1\102\1\7\1\0\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\0\1\115\1\7\1\0\1\7\1\0\3\7"+
    "\1\116\1\0\1\117\2\7\1\120\5\7\1\0\7\7"+
    "\1\121\4\7\2\0\1\122\1\0\1\7\5\0\1\123"+
    "\2\7\1\124\1\7\1\125\1\126\1\0\1\7\1\0"+
    "\12\7\1\0\1\127\1\130\1\7\5\0\2\7\2\0"+
    "\1\7\4\0\1\7\1\131\3\7\1\132\1\7\1\133"+
    "\1\7\5\0\2\7\1\134\10\0\1\7\3\0\1\135"+
    "\1\136\3\0\1\137\2\7\1\0\1\140\14\0\1\7"+
    "\6\0\1\7\16\0\1\7\3\0\1\141\1\142\1\143"+
    "\4\0\1\144\12\0\1\145\26\0\1\146\1\0\1\147"+
    "\1\150\1\151\31\0\1\152\7\0\1\153\1\154\1\155"+
    "\34\0\1\156\17\0\1\157\16\0\1\160\1\161\12\0"+
    "\1\162\1\163\10\0\1\164\3\0\1\165\1\0\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\102\0\u0882\0\u08c4\0\u0906\0\102\0\102\0\u0948"+
    "\0\u08c4\0\102\0\102\0\u098a\0\102\0\u09cc\0\102\0\u0a0e"+
    "\0\102\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0210\0\102\0\u0d68"+
    "\0\102\0\u0210\0\102\0\102\0\102\0\u0daa\0\102\0\u0dec"+
    "\0\102\0\102\0\102\0\102\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104"+
    "\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u0e70"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u0210\0\u1986\0\u19c8\0\102\0\102\0\102\0\102"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u0210\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u0210"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u0210\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562"+
    "\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u0210\0\u0210\0\u0210"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u0210"+
    "\0\u0210\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u0210\0\u2a06"+
    "\0\u0210\0\u2a48\0\u2a8a\0\102\0\u2acc\0\u2b0e\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\u2b50\0\102\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u2d1e\0\u0210\0\u2d60\0\u0210\0\u2da2\0\u2de4\0\u0210\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u0210\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u0210\0\u330c\0\u334e\0\u3390\0\u33d2"+
    "\0\u3414\0\u3456\0\u3498\0\u0210\0\u34da\0\u351c\0\u0210\0\u355e"+
    "\0\u0210\0\u0210\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\102\0\102\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u0210\0\u3d5c\0\u3d9e\0\u3de0\0\u0210\0\u3e22"+
    "\0\102\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u0210\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be"+
    "\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u0210\0\102"+
    "\0\u438c\0\u43ce\0\u4410\0\102\0\u4452\0\u4494\0\u44d6\0\102"+
    "\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6"+
    "\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\102\0\102"+
    "\0\102\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\102\0\u4fec\0\u502e"+
    "\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba\0\u51fc\0\u523e"+
    "\0\u0210\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c"+
    "\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c"+
    "\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea\0\102"+
    "\0\u582c\0\102\0\102\0\102\0\u586e\0\u58b0\0\u58f2\0\u5934"+
    "\0\u5976\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44"+
    "\0\u5b86\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54"+
    "\0\u5d96\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\102\0\u5ee0\0\u5f22"+
    "\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c\0\102\0\102\0\102"+
    "\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a\0\u627c"+
    "\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a\0\u648c"+
    "\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c"+
    "\0\u66de\0\u6720\0\u6762\0\u67a4\0\102\0\u67e6\0\u6828\0\u686a"+
    "\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a"+
    "\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\102\0\u6bc4\0\u6c06\0\u6c48"+
    "\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58"+
    "\0\u6e9a\0\u6edc\0\u6f1e\0\102\0\102\0\u6f60\0\u6fa2\0\u6fe4"+
    "\0\u7026\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u71b2\0\102"+
    "\0\102\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u733e\0\u7380"+
    "\0\u73c2\0\102\0\u7404\0\u7446\0\u7488\0\102\0\u74ca\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\11\1\37"+
    "\1\40\2\11\1\41\1\42\1\43\1\44\1\11\1\45"+
    "\1\46\2\11\1\47\6\50\1\11\1\51\1\52\1\2"+
    "\1\11\1\53\2\11\1\52\1\54\1\2\1\50\1\55"+
    "\1\11\104\0\1\56\15\0\1\57\2\0\1\60\32\0"+
    "\6\50\11\0\1\61\1\0\1\50\1\55\4\0\1\62"+
    "\14\0\1\63\2\0\1\60\32\0\6\50\11\0\1\61"+
    "\1\0\1\50\1\55\6\0\1\64\12\0\1\65\65\0"+
    "\1\66\13\0\1\67\67\0\1\70\11\0\1\71\20\0"+
    "\1\72\2\0\1\73\1\0\1\74\1\75\2\0\1\76"+
    "\2\0\1\77\6\0\1\100\2\0\1\101\1\102\20\0"+
    "\1\11\1\103\2\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\1\104\2\11"+
    "\1\105\1\0\1\11\17\0\13\11\1\106\16\11\2\0"+
    "\4\11\3\0\3\11\13\0\1\107\1\0\1\110\2\0"+
    "\1\111\70\0\4\11\1\0\1\112\3\0\1\113\13\0"+
    "\32\11\2\0\4\11\3\0\3\11\20\0\1\114\64\0"+
    "\1\115\12\0\1\116\1\0\1\117\100\0\1\120\1\121"+
    "\101\0\1\122\101\0\1\123\101\0\1\124\104\0\1\125"+
    "\32\0\6\126\11\0\1\127\1\0\2\126\10\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\130\5\11\1\131\22\11"+
    "\2\0\4\11\3\0\3\11\7\0\1\11\1\132\2\11"+
    "\1\0\1\11\17\0\2\11\1\133\27\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\14\11"+
    "\1\134\15\11\2\0\4\11\3\0\3\11\7\0\1\11"+
    "\1\135\2\11\1\0\1\11\17\0\6\11\1\136\1\137"+
    "\22\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\140\5\11\1\141\6\11\1\142"+
    "\12\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\143\16\11\1\144\11\11\2\0"+
    "\4\11\3\0\3\11\7\0\2\11\1\145\1\146\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\147\27\11\2\0"+
    "\4\11\3\0\3\11\7\0\1\11\1\150\2\11\1\0"+
    "\1\11\17\0\7\11\1\151\1\11\1\152\2\11\1\153"+
    "\15\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\7\11\1\154\22\11\2\0\4\11\3\0"+
    "\3\11\7\0\1\11\1\155\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\1\11\1\156"+
    "\2\11\1\0\1\11\17\0\32\11\2\0\4\11\3\0"+
    "\3\11\2\0\1\157\20\0\1\160\32\0\6\50\2\0"+
    "\1\161\5\0\1\161\1\61\1\161\1\50\1\162\1\0"+
    "\1\161\6\0\4\11\1\0\1\11\17\0\7\11\1\163"+
    "\22\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\32\11\2\0\2\11\1\164\1\11\3\0"+
    "\3\11\2\0\1\157\20\0\1\127\32\0\6\61\2\0"+
    "\1\161\5\0\1\161\1\61\1\161\2\61\1\0\1\161"+
    "\1\0\1\157\20\0\1\127\32\0\6\55\2\0\1\161"+
    "\5\0\1\161\1\61\1\161\2\55\1\0\1\161\55\0"+
    "\6\126\11\0\1\127\1\0\2\126\21\0\1\165\101\0"+
    "\1\166\101\0\1\167\101\0\1\170\101\0\1\171\101\0"+
    "\1\172\101\0\1\173\101\0\1\174\101\0\1\175\101\0"+
    "\1\176\136\0\1\177\44\0\1\200\70\0\2\11\1\201"+
    "\1\11\1\0\1\11\17\0\16\11\1\202\13\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\16\11\1\203\13\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\10\11\1\204\21\11\2\0"+
    "\4\11\3\0\3\11\20\0\1\205\101\0\1\206\101\0"+
    "\1\207\104\0\1\210\60\0\1\157\53\0\6\126\2\0"+
    "\1\161\5\0\1\161\1\127\1\161\2\126\1\0\1\161"+
    "\1\0\1\157\53\0\6\127\2\0\1\161\5\0\1\161"+
    "\1\127\1\161\2\127\1\0\1\161\6\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\211\27\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\7\11\1\212"+
    "\22\11\2\0\4\11\3\0\3\11\7\0\3\11\1\213"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\10\11\1\214\21\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\5\11\1\215\24\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\5\11\1\216\24\11"+
    "\2\0\4\11\3\0\3\11\7\0\1\11\1\217\2\11"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\1\220\2\11\1\221\1\0\1\11\17\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\222\15\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\1\11\1\223\30\11"+
    "\2\0\4\11\3\0\3\11\7\0\2\11\1\224\1\11"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\11\11\1\225\20\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\16\11\1\226\13\11\2\0\4\11\3\0\3\11"+
    "\7\0\3\11\1\227\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\230\21\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\13\11\1\231\16\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\14\11\1\232\15\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\1\11\1\233\30\11\2\0"+
    "\4\11\3\0\3\11\7\0\3\11\1\234\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\7\11\1\235\22\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\10\11"+
    "\1\236\21\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\4\11\1\237\25\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\1\11"+
    "\1\240\30\11\2\0\4\11\3\0\3\11\2\0\2\241"+
    "\17\0\1\242\32\0\6\243\2\0\1\157\5\0\1\157"+
    "\1\243\1\157\2\243\1\0\1\157\1\0\1\157\63\0"+
    "\1\161\5\0\1\161\1\0\1\161\3\0\1\161\1\0"+
    "\1\157\20\0\1\127\32\0\6\162\2\0\1\161\5\0"+
    "\1\161\1\61\1\161\2\162\1\0\1\161\6\0\2\11"+
    "\1\244\1\11\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\32\11"+
    "\2\0\3\11\1\245\3\0\3\11\4\0\1\246\102\0"+
    "\1\247\102\0\1\250\101\0\1\251\101\0\1\252\101\0"+
    "\1\253\101\0\1\254\101\0\1\255\101\0\1\256\101\0"+
    "\1\257\113\0\1\260\67\0\1\261\102\0\3\11\1\262"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\7\11\1\263\22\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\264\13\0\2\11\1\265\17\11\1\266\1\267"+
    "\1\270\1\271\4\11\2\0\4\11\3\0\3\11\7\0"+
    "\1\11\1\272\2\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\14\11\1\273\15\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\15\11\1\274\14\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\11\11\1\275\20\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\276\27\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\2\11\1\277\27\11\2\0\4\11\3\0\3\11\7\0"+
    "\3\11\1\300\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\16\11"+
    "\1\301\13\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\5\11\1\302\2\11\1\303\21\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\304\27\11\2\0\4\11\3\0\3\11"+
    "\7\0\2\11\1\305\1\11\1\0\1\11\17\0\11\11"+
    "\1\306\20\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\10\11\1\307\21\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\2\11"+
    "\1\310\27\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\2\11\1\311\27\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\10\11"+
    "\1\312\21\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\20\11\1\313\11\11\2\0\4\11"+
    "\3\0\3\11\7\0\1\11\1\314\2\11\1\0\1\11"+
    "\17\0\2\11\1\315\27\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\5\11\1\225\6\11"+
    "\1\316\15\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\4\11\1\317\25\11\2\0\4\11"+
    "\3\0\3\11\7\0\1\11\1\320\2\11\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\7\11\1\321\22\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\3\11"+
    "\1\322\26\11\2\0\4\11\3\0\3\11\23\0\1\242"+
    "\32\0\6\243\11\0\1\243\1\0\2\243\57\0\6\323"+
    "\11\0\1\323\1\0\2\323\12\0\1\324\11\0\1\323"+
    "\32\0\6\243\11\0\1\243\1\0\2\243\10\0\3\11"+
    "\1\325\1\0\1\11\17\0\32\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\326\13\0"+
    "\32\11\2\0\4\11\3\0\3\11\5\0\1\327\100\0"+
    "\1\330\103\0\1\331\134\0\1\332\104\0\1\333\103\0"+
    "\1\334\102\0\1\335\104\0\1\336\104\0\1\337\110\0"+
    "\1\340\23\0\1\341\163\0\1\342\20\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\343\30\11\2\0\4\11\3\0"+
    "\3\11\11\0\1\344\77\0\4\11\1\0\1\11\17\0"+
    "\1\11\1\345\30\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\3\0\1\346\13\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\24\11\1\347\5\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\27\11\1\350\2\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\26\11\1\351\3\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\3\11\1\352\26\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\3\0"+
    "\1\353\13\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\354\27\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\1\11\1\355\30\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\14\11\1\356\15\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\357\21\11\2\0\4\11\3\0\3\11\7\0"+
    "\2\11\1\360\1\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\361\25\11\2\0\4\11\3\0\3\11\7\0"+
    "\3\11\1\362\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\4\11"+
    "\1\363\25\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\4\11\1\364\25\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\3\0\1\365"+
    "\13\0\16\11\1\366\3\11\1\367\1\370\1\371\1\372"+
    "\4\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\16\11\1\373\13\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\11\11\1\374"+
    "\20\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\375\30\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\376"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\377\21\11\2\0\4\11\3\0"+
    "\3\11\7\0\1\11\1\u0100\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\11\0\1\324\44\0"+
    "\6\323\11\0\1\323\1\0\2\323\10\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\u0101\21\11\2\0\4\11\3\0"+
    "\3\11\71\0\1\u0102\77\0\1\u0103\21\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\u0104\21\11\2\0\4\11\3\0"+
    "\3\11\12\0\1\u0105\76\0\4\11\1\0\1\11\17\0"+
    "\13\11\1\u0106\16\11\2\0\4\11\3\0\3\11\11\0"+
    "\1\u0107\77\0\4\11\1\0\1\11\3\0\1\u0108\13\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\u0109\13\0\32\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u010a\13\0"+
    "\32\11\2\0\4\11\3\0\3\11\34\0\1\u010b\54\0"+
    "\3\11\1\u010c\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\2\11"+
    "\1\u010d\27\11\2\0\4\11\3\0\3\11\7\0\3\11"+
    "\1\u010e\1\0\1\11\17\0\32\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\u010f"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\15\11\1\u0110\14\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\u0111"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\6\11\1\u0112\23\11\2\0\4\11\3\0"+
    "\3\11\45\0\1\u0113\43\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\u0114\21\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\3\0\1\u0115\13\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\24\11\1\u0116\5\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\27\11\1\u0117\2\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\26\11\1\u0118\3\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\u0119\27\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\14\11\1\u011a\15\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\6\11\1\u011b\23\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\24\11\1\u011c\1\u011d\4\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\15\11\1\u011e\14\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\u011f\27\11\2\0\4\11\3\0\3\11"+
    "\72\0\1\u0120\64\0\1\u0121\70\0\1\u0122\44\0\1\11"+
    "\1\u0123\2\11\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\12\0\1\u0124\100\0\1\u0125\101\0\1\u0126"+
    "\101\0\1\u0127\133\0\1\u0128\45\0\4\11\1\0\1\11"+
    "\17\0\30\11\1\u0129\1\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\11\11\1\u012a\20\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\u012b\13\0\32\11\2\0\4\11\3\0\3\11"+
    "\11\0\1\u012c\77\0\4\11\1\0\1\11\17\0\1\11"+
    "\1\u012d\30\11\2\0\4\11\3\0\3\11\45\0\1\u012e"+
    "\43\0\4\11\1\0\1\11\3\0\1\u012f\13\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\u0130\13\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\u0131\13\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\12\11\1\u0132\17\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\10\11\1\u0133\21\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\1\11\1\u0134\30\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\27\11\1\u0135\2\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\26\11\1\u0136\3\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\2\11\1\u0137\27\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\1\11\1\u0138\30\11\2\0\4\11\3\0\3\11"+
    "\73\0\1\u0139\15\0\4\11\1\0\1\11\17\0\4\11"+
    "\1\u013a\25\11\2\0\4\11\3\0\3\11\44\0\1\u013b"+
    "\47\0\1\u013c\101\0\1\u013d\101\0\1\u013e\132\0\1\u013f"+
    "\45\0\4\11\1\0\1\11\17\0\23\11\1\u0140\1\u0141"+
    "\5\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\u0142\27\11\2\0\4\11\3\0"+
    "\3\11\41\0\1\u0143\52\0\1\u0144\76\0\4\11\1\0"+
    "\1\11\3\0\1\u0145\13\0\32\11\2\0\4\11\3\0"+
    "\3\11\11\0\1\u0146\135\0\1\u0147\101\0\1\u0148\101\0"+
    "\1\u0149\43\0\4\11\1\0\1\11\17\0\32\11\1\u014a"+
    "\1\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\7\11\1\u014b\22\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\u014c\13\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\u014d\13\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\u014e\13\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\u014f\27\11\2\0\4\11\3\0\3\11"+
    "\56\0\1\u0150\67\0\1\u0151\101\0\1\u0152\101\0\1\u0153"+
    "\105\0\1\u0154\40\0\4\11\1\0\1\11\17\0\26\11"+
    "\1\u0155\3\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\27\11\1\u0156\2\11\2\0\4\11"+
    "\3\0\3\11\44\0\1\u0157\101\0\1\u0158\102\0\1\u0159"+
    "\46\0\1\u015a\100\0\1\u015b\101\0\1\u015c\101\0\1\u015d"+
    "\101\0\1\u015e\1\u015f\21\0\1\u0160\1\u0161\2\0\1\u0162"+
    "\1\u0163\5\0\1\u0164\41\0\4\11\1\0\1\11\17\0"+
    "\11\11\1\u0165\20\11\2\0\4\11\3\0\3\11\47\0"+
    "\1\u0166\101\0\1\u0167\117\0\1\u0168\73\0\1\u0169\102\0"+
    "\1\u016a\102\0\1\u016b\27\0\4\11\1\0\1\11\17\0"+
    "\22\11\1\u016c\7\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\3\0\1\u016d\13\0\32\11\2\0"+
    "\4\11\3\0\3\11\35\0\1\u016e\55\0\1\u016f\134\0"+
    "\1\u0170\47\0\1\u0171\101\0\1\u0172\101\0\1\u0173\101\0"+
    "\1\u0174\100\0\1\u0175\133\0\1\u0176\103\0\1\u0177\77\0"+
    "\1\u0178\102\0\1\u0179\105\0\1\u017a\40\0\4\11\1\0"+
    "\1\11\17\0\15\11\1\u017b\14\11\2\0\4\11\3\0"+
    "\3\11\50\0\1\u017c\101\0\1\u017d\74\0\1\u017e\116\0"+
    "\1\u017f\104\0\1\u0180\100\0\1\u0181\26\0\4\11\1\0"+
    "\1\11\3\0\1\u0182\13\0\32\11\2\0\4\11\3\0"+
    "\3\11\40\0\1\u0183\52\0\1\u0184\102\0\1\u0185\145\0"+
    "\1\u0186\67\0\1\u0187\101\0\1\u0188\101\0\1\u0189\101\0"+
    "\1\u018a\105\0\1\u018b\74\0\1\u018c\50\0\1\u018d\76\0"+
    "\1\u018e\127\0\1\u018f\107\0\1\u0190\45\0\4\11\1\0"+
    "\1\11\17\0\6\11\1\u0191\23\11\2\0\4\11\3\0"+
    "\3\11\43\0\1\u0192\101\0\1\u0193\47\0\1\u0194\130\0"+
    "\1\u0195\104\0\1\u0196\50\0\1\u0197\133\0\1\u0198\114\0"+
    "\1\u0199\102\0\1\u019a\102\0\1\u019b\40\0\1\u019c\101\0"+
    "\1\u019d\131\0\1\u019e\67\0\1\u019f\115\0\1\u01a0\40\0"+
    "\1\u01a1\100\0\1\u01a2\101\0\1\u01a3\101\0\1\u01a4\103\0"+
    "\1\u01a5\132\0\1\u01a6\45\0\1\u01a7\143\0\1\u01a8\102\0"+
    "\1\u01a9\107\0\1\u01aa\104\0\1\u01ab\100\0\1\u01ac\64\0"+
    "\1\u01ad\101\0\1\u01ae\54\0\1\u01af\101\0\1\u01b0\131\0"+
    "\1\u01b1\43\0\1\u01b2\133\0\1\u01b3\101\0\1\u01b4\101\0"+
    "\1\u01b5\101\0\1\u01b6\44\0\1\u01b7\144\0\1\u01b8\73\0"+
    "\1\u01b9\47\0\1\u01ba\101\0\1\u01bb\134\0\1\u01bc\101\0"+
    "\1\u01bd\72\0\1\u01be\114\0\1\u01bf\50\0\1\u01c0\141\0"+
    "\1\u01c1\102\0\1\u01c2\56\0\1\u01c3\115\0\1\u01c4\77\0"+
    "\1\u01c5\66\0\1\u01c6\110\0\1\u01c7\101\0\1\u01c8\47\0"+
    "\1\u01c9\101\0\1\u01ca\153\0\1\u01cb\35\0\1\u01cc\126\0"+
    "\1\u01cd\117\0\1\u01ce\100\0\1\u01cf\54\0\1\u01d0\114\0"+
    "\1\u01d1\67\0\1\u01d2\117\0\1\u01d3\101\0\1\u01d4\71\0"+
    "\1\u01d5\101\0\1\u01d6\55\0\1\u01d7\126\0\1\u01d8\46\0"+
    "\1\u01d9\125\0\1\u01da\127\0\1\u01db\67\0\1\u01dc\101\0"+
    "\1\u01dd\103\0\1\u01de\101\0\1\u01df\72\0\1\u01e0\46\0"+
    "\1\u01e1\133\0\1\u01e2\121\0\1\u01e3\75\0\1\u01e4\57\0"+
    "\1\u01e5\101\0\1\u01e6\115\0\1\u01e7\101\0\1\u01e8\41\0"+
    "\1\u01e9\133\0\1\u01ea\111\0\1\u01eb\104\0\1\u01ec\105\0"+
    "\1\u01ed\64\0\1\u01ee\101\0\1\u01ef\71\0\1\u01f0\101\0"+
    "\1\u01f1\107\0\1\u01f2\111\0\1\u01f3\77\0\1\u01f4\111\0"+
    "\1\u01f5\105\0\1\u01f6\101\0\1\u01f7\61\0\1\u01f8\101\0"+
    "\1\u01f9\107\0\1\u01fa\77\0\1\u01fb\65\0\1\u01fc\121\0"+
    "\1\u01fd\34\0\1\u01fe\102\0\1\u01ff\155\0\1\u0200\101\0"+
    "\1\u0201\65\0\1\u0202\65\0\1\u0203\111\0\1\u0204\45\0"+
    "\1\u0205\100\0\1\u0206\124\0\1\u0207\102\0\1\u0208\102\0"+
    "\1\u0209\111\0\1\u020a\121\0\1\u020b\57\0\1\u020c\105\0"+
    "\1\u020d\74\0\1\u020e\103\0\1\u020f\102\0\1\u0210\121\0"+
    "\1\u0211\62\0\1\u0212\75\0\1\u0213\50\0\1\u0214\155\0"+
    "\1\u0215\54\0\1\u0216\110\0\1\u0217\101\0\1\u0218\67\0"+
    "\1\u0219\103\0\1\u021a\105\0\1\u021b\100\0\1\u021c\101\0"+
    "\1\u021d\73\0\1\u021e\54\0\1\u021f\100\0\1\u0220\103\0"+
    "\1\u0221\134\0\1\u0222\107\0\1\u0223\41\0\1\u0224\137\0"+
    "\1\u0225\102\0\1\u0226\66\0\1\u0227\127\0\1\u0228\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\10\11\16\1\1\11\3\1\2\11"+
    "\2\0\2\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\4\1\1\11\1\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\4\11\1\0\1\1\1\0\27\1\3\0"+
    "\3\1\14\0\4\1\4\11\30\1\3\0\2\1\14\0"+
    "\2\1\1\0\36\1\1\0\1\11\1\1\1\0\12\11"+
    "\1\0\1\11\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\11\1\1\0\14\1\2\0\1\1\1\0\1\1\5\0"+
    "\7\1\1\0\1\1\1\0\12\1\1\0\2\11\1\1"+
    "\5\0\2\1\2\0\1\1\4\0\7\1\1\11\1\1"+
    "\5\0\3\1\10\0\1\1\3\0\1\1\1\11\3\0"+
    "\1\11\2\1\1\0\1\11\14\0\1\1\6\0\1\1"+
    "\16\0\1\1\3\0\3\11\4\0\1\11\12\0\1\1"+
    "\26\0\1\11\1\0\3\11\31\0\1\11\7\0\3\11"+
    "\34\0\1\11\17\0\1\11\16\0\2\11\12\0\2\11"+
    "\10\0\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 428) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 119: break;
          case 2: 
            { imprimir("Operador de soma", yytext());
            }
          case 120: break;
          case 3: 
            { imprimir("Operador de subtracao", yytext());
            }
          case 121: break;
          case 4: 
            { imprimir("Operador de multiplicacao", yytext());
            }
          case 122: break;
          case 5: 
            { imprimir("Operador de divisao", yytext());
            }
          case 123: break;
          case 6: 
            { imprimir("Operador de resto", yytext());
            }
          case 124: break;
          case 7: 
            { imprimir("Identificador", yytext());
            }
          case 125: break;
          case 8: 
            { imprimir("Operador and", yytext());
            }
          case 126: break;
          case 9: 
            { imprimir("Operador or", yytext());
            }
          case 127: break;
          case 10: 
            { imprimir("Operador xor", yytext());
            }
          case 128: break;
          case 11: 
            { imprimir("Operador de menor que", yytext());
            }
          case 129: break;
          case 12: 
            { imprimir("Operador de maior que", yytext());
            }
          case 130: break;
          case 13: 
            { imprimir("Operador de atribuicao", yytext());
            }
          case 131: break;
          case 14: 
            { imprimir("Operador de negacao", yytext());
            }
          case 132: break;
          case 15: 
            { imprimir("Caractere dois pontos", yytext());
            }
          case 133: break;
          case 16: 
            { imprimir("Caractere ponto", yytext());
            }
          case 134: break;
          case 17: 
            { imprimir("Caractere parentese esquerdo", yytext());
            }
          case 135: break;
          case 18: 
            { imprimir("Caractere parentese direito", yytext());
            }
          case 136: break;
          case 19: 
            { imprimir("Caractere chave esquerda", yytext());
            }
          case 137: break;
          case 20: 
            { imprimir("Caractere chave direita", yytext());
            }
          case 138: break;
          case 21: 
            { imprimir("Caractere colchete esquerdo", yytext());
            }
          case 139: break;
          case 22: 
            { imprimir("Caractere colchete direito", yytext());
            }
          case 140: break;
          case 23: 
            { imprimir("Caractere virgula", yytext());
            }
          case 141: break;
          case 24: 
            { imprimir("Caractere ponto e virgula", yytext());
            }
          case 142: break;
          case 25: 
            { imprimir("Número Inteiro", yytext());
            }
          case 143: break;
          case 26: 
            { imprimir("Espaço em branco", yytext());
            }
          case 144: break;
          case 27: 
            { imprimir("Número Float", yytext());
            }
          case 145: break;
          case 28: 
            { imprimir("Operador de incremento", yytext());
            }
          case 146: break;
          case 29: 
            { imprimir("Atribuicao de soma", yytext());
            }
          case 147: break;
          case 30: 
            { imprimir("Operador de decremento", yytext());
            }
          case 148: break;
          case 31: 
            { imprimir("Atribuicao de subtracao", yytext());
            }
          case 149: break;
          case 32: 
            { imprimir("Atribuicao de multiplicacao", yytext());
            }
          case 150: break;
          case 33: 
            { imprimir("Atribuicao de divisao", yytext());
            }
          case 151: break;
          case 34: 
            { imprimir("Atribuicao de resto", yytext());
            }
          case 152: break;
          case 35: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 153: break;
          case 36: 
            { imprimir("Opeerador land", yytext());
            }
          case 154: break;
          case 37: 
            { imprimir("Operador and not", yytext());
            }
          case 155: break;
          case 38: 
            { imprimir("Atribuicao de and", yytext());
            }
          case 156: break;
          case 39: 
            { imprimir("Operador lor", yytext());
            }
          case 157: break;
          case 40: 
            { imprimir("Atribuicao de or", yytext());
            }
          case 158: break;
          case 41: 
            { imprimir("Atribuicao de xor", yytext());
            }
          case 159: break;
          case 42: 
            { imprimir("Operador arrow", yytext());
            }
          case 160: break;
          case 43: 
            { imprimir("Operador shift left", yytext());
            }
          case 161: break;
          case 44: 
            { imprimir("Operador de menor igual", yytext());
            }
          case 162: break;
          case 45: 
            { imprimir("Operador shift right", yytext());
            }
          case 163: break;
          case 46: 
            { imprimir("Operador de maior igual", yytext());
            }
          case 164: break;
          case 47: 
            { imprimir("Operador de igualdade", yytext());
            }
          case 165: break;
          case 48: 
            { imprimir("Operador de diferente", yytext());
            }
          case 166: break;
          case 49: 
            { imprimir("Operador de define", yytext());
            }
          case 167: break;
          case 50: 
            { imprimir("Palavra reservada go", yytext());
            }
          case 168: break;
          case 51: 
            { imprimir("Palavra reservada map", yytext());
            }
          case 169: break;
          case 52: 
            { imprimir("Atribuicao de and not", yytext());
            }
          case 170: break;
          case 53: 
            { imprimir("Atribuicao de sl", yytext());
            }
          case 171: break;
          case 54: 
            { imprimir("Atribuicao de sr", yytext());
            }
          case 172: break;
          case 55: 
            { imprimir("Operador de elipse", yytext());
            }
          case 173: break;
          case 56: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 174: break;
          case 57: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 175: break;
          case 58: 
            { imprimir("Identificador de main", yytext());
            }
          case 176: break;
          case 59: 
            { imprimir("Palavra reservada else", yytext());
            }
          case 177: break;
          case 60: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 178: break;
          case 61: 
            { imprimir("Palavra reservada chan", yytext());
            }
          case 179: break;
          case 62: 
            { imprimir("Valor boolean", yytext());
            }
          case 180: break;
          case 63: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 181: break;
          case 64: 
            { imprimir("Palavra reservada func", yytext());
            }
          case 182: break;
          case 65: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 183: break;
          case 66: 
            { imprimir("Número Complexo", yytext());
            }
          case 184: break;
          case 67: 
            { imprimir("Final do comentario", yytext());
            }
          case 185: break;
          case 68: 
            { imprimir("Inicio do comentario", yytext());
            }
          case 186: break;
          case 69: 
            { imprimir("Forrmato porcento", yytext());
            }
          case 187: break;
          case 70: 
            { imprimir("Forrmato string", yytext());
            }
          case 188: break;
          case 71: 
            { imprimir("Forrmato boolean", yytext());
            }
          case 189: break;
          case 72: 
            { imprimir("Forrmato inteiro", yytext());
            }
          case 190: break;
          case 73: 
            { imprimir("Forrmato float", yytext());
            }
          case 191: break;
          case 74: 
            { imprimir("Forrmato apontador", yytext());
            }
          case 192: break;
          case 75: 
            { imprimir("Forrmato default", yytext());
            }
          case 193: break;
          case 76: 
            { imprimir("Forrmato indefinido", yytext());
            }
          case 194: break;
          case 77: 
            { imprimir("Forrmato tipo generico", yytext());
            }
          case 195: break;
          case 78: 
            { imprimir("Palavra reservada break", yytext());
            }
          case 196: break;
          case 79: 
            { imprimir("Palavra reservada range", yytext());
            }
          case 197: break;
          case 80: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 198: break;
          case 81: 
            { imprimir("Palavra reservada defer", yytext());
            }
          case 199: break;
          case 82: 
            { imprimir("Palavra reservada import", yytext());
            }
          case 200: break;
          case 83: 
            { imprimir("Palavra reservada return", yytext());
            }
          case 201: break;
          case 84: 
            { imprimir("Palavra reservada select", yytext());
            }
          case 202: break;
          case 85: 
            { imprimir("Palavra reservada struct", yytext());
            }
          case 203: break;
          case 86: 
            { imprimir("Palavra reservada switch", yytext());
            }
          case 204: break;
          case 87: 
            { imprimir("Forrmato valor", yytext());
            }
          case 205: break;
          case 88: 
            { imprimir("Tipo de variável int", yytext());
            }
          case 206: break;
          case 89: 
            { imprimir("Palavra reservada default", yytext());
            }
          case 207: break;
          case 90: 
            { imprimir("Palavra reservada package", yytext());
            }
          case 208: break;
          case 91: 
            { imprimir("Palavra reservada EOF var", yytext());
            }
          case 209: break;
          case 92: 
            { imprimir("Palavra reservada continue", yytext());
            }
          case 210: break;
          case 93: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 211: break;
          case 94: 
            { imprimir("Tipo de variável int 8bits", yytext());
            }
          case 212: break;
          case 95: 
            { imprimir("Tipo de variável bool", yytext());
            }
          case 213: break;
          case 96: 
            { imprimir("Tipo de variável int não-definido", yytext());
            }
          case 214: break;
          case 97: 
            { imprimir("Tipo de variável int 16bits", yytext());
            }
          case 215: break;
          case 98: 
            { imprimir("Tipo de variável int 64bits", yytext());
            }
          case 216: break;
          case 99: 
            { imprimir("Tipo de variável int 32bits", yytext());
            }
          case 217: break;
          case 100: 
            { imprimir("Tipo de variável int não-definido de 8bits", yytext());
            }
          case 218: break;
          case 101: 
            { imprimir("Palavra reservada fallthrough", yytext());
            }
          case 219: break;
          case 102: 
            { imprimir("Tipo de variável string", yytext());
            }
          case 220: break;
          case 103: 
            { imprimir("Tipo de variável int não-definido de 16bits", yytext());
            }
          case 221: break;
          case 104: 
            { imprimir("Tipo de variável int não-definido de 64bits", yytext());
            }
          case 222: break;
          case 105: 
            { imprimir("Tipo de variável int não-definido de 32bits", yytext());
            }
          case 223: break;
          case 106: 
            { imprimir("Tipo de variável int ", yytext());
            }
          case 224: break;
          case 107: 
            { imprimir("Tipo de variável float 64bits", yytext());
            }
          case 225: break;
          case 108: 
            { imprimir("Tipo de variável float 32bits", yytext());
            }
          case 226: break;
          case 109: 
            { imprimir("Tipo de variável apontador", yytext());
            }
          case 227: break;
          case 110: 
            { imprimir("Tipo de variável numero complexo de 64bits", yytext());
            }
          case 228: break;
          case 111: 
            { imprimir("Tipo de variável numero complexo de 128bits", yytext());
            }
          case 229: break;
          case 112: 
            { imprimir("Tipo de variável untyped int", yytext());
            }
          case 230: break;
          case 113: 
            { imprimir("Tipo de variável untyped nil", yytext());
            }
          case 231: break;
          case 114: 
            { imprimir("Tipo de variável untyped bool", yytext());
            }
          case 232: break;
          case 115: 
            { imprimir("Tipo de variável untyped rune", yytext());
            }
          case 233: break;
          case 116: 
            { imprimir("Tipo de variável untyped float", yytext());
            }
          case 234: break;
          case 117: 
            { imprimir("Tipo de variável untyped string", yytext());
            }
          case 235: break;
          case 118: 
            { imprimir("Tipo de variável untyped complex", yytext());
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
