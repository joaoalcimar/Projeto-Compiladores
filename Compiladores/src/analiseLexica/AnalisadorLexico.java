/* The following code was generated by JFlex 1.6.1 */

package analiseLexica;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morgok/Desktop/Compiladores/Projeto-Compiladores-master/Compiladores/src/analiseLexica/Linguagem.lex</tt>
 */
class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\73\1\77\1\77\1\73\22\0\1\65\1\20\1\0"+
    "\1\66\1\0\1\5\1\12\1\0\1\23\1\24\1\3\1\1\1\31"+
    "\1\2\1\22\1\4\1\75\1\56\1\61\1\60\1\62\1\74\1\57"+
    "\1\74\1\55\1\74\1\21\1\32\1\15\1\17\1\16\2\0\4\76"+
    "\1\70\1\72\10\76\1\71\1\64\3\76\1\67\6\76\1\25\1\0"+
    "\1\26\1\14\1\76\1\0\1\7\1\33\1\37\1\45\1\35\1\46"+
    "\1\50\1\41\1\10\1\76\1\36\1\47\1\6\1\11\1\42\1\51"+
    "\1\76\1\34\1\40\1\43\1\44\1\54\1\52\1\63\1\53\1\76"+
    "\1\27\1\13\1\30\7\0\1\77\u1fa2\0\1\77\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\14\7\1\31\1\7\1\32\1\7\1\33\1\34"+
    "\1\35\1\0\1\36\1\37\1\0\1\40\1\0\1\41"+
    "\1\0\1\42\11\0\3\7\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\0\24\7\1\62\2\7\1\31"+
    "\2\7\14\0\1\7\1\63\2\7\1\64\1\65\1\66"+
    "\1\67\22\7\1\70\4\7\1\71\2\7\14\0\1\72"+
    "\1\7\1\0\11\7\1\73\1\74\1\75\7\7\1\76"+
    "\1\77\5\7\1\100\1\7\1\101\2\7\1\0\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\0\1\114\1\7\1\0\1\7\1\0\3\7"+
    "\1\115\1\0\1\116\2\7\1\117\5\7\1\0\7\7"+
    "\1\120\4\7\2\0\1\121\1\0\1\7\5\0\1\122"+
    "\2\7\1\123\1\7\1\124\1\125\1\0\1\7\1\0"+
    "\12\7\1\0\1\126\1\127\1\7\5\0\2\7\2\0"+
    "\1\7\4\0\1\7\1\130\3\7\1\131\1\7\1\132"+
    "\1\7\5\0\2\7\1\133\10\0\1\7\3\0\1\134"+
    "\1\135\3\0\1\136\2\7\1\0\1\137\14\0\1\7"+
    "\6\0\1\7\16\0\1\7\3\0\1\140\1\141\1\142"+
    "\4\0\1\143\12\0\1\144\26\0\1\145\1\0\1\146"+
    "\1\147\1\150\31\0\1\151\7\0\1\152\1\153\1\154"+
    "\34\0\1\155\17\0\1\156\16\0\1\157\1\160\12\0"+
    "\1\161\1\162\10\0\1\163\3\0\1\164\1\0\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\100\0\u0840\0\u0880\0\100\0\100\0\u0880\0\100"+
    "\0\100\0\u08c0\0\100\0\u0900\0\100\0\u0940\0\100\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0c40\0\u0200\0\100\0\u0c80\0\100\0\u0200"+
    "\0\100\0\100\0\100\0\u0cc0\0\100\0\u0d00\0\100\0\100"+
    "\0\100\0\100\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u0200\0\u1740\0\u1780\0\100\0\100\0\100"+
    "\0\100\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u0200\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u0200\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u0200"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u0200\0\u0200\0\u0200\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u0200\0\u0200\0\u2540"+
    "\0\u2580\0\u25c0\0\u2600\0\u2640\0\u0200\0\u2680\0\u0200\0\u26c0"+
    "\0\u2700\0\u2740\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u2780\0\100\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u0200\0\u2980\0\u0200"+
    "\0\u29c0\0\u2a00\0\u0200\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u0200\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u0200"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u0200"+
    "\0\u30c0\0\u3100\0\u0200\0\u3140\0\u0200\0\u0200\0\u3180\0\u31c0"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\u34c0\0\100\0\100\0\u3500\0\u3540"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740"+
    "\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u0200\0\u3900"+
    "\0\u3940\0\u3980\0\u0200\0\u39c0\0\100\0\u3a00\0\u3a40\0\u3a80"+
    "\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u0200\0\u3c00\0\u3c40"+
    "\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40"+
    "\0\u3e80\0\u3ec0\0\u0200\0\100\0\u3f00\0\u3f40\0\u3f80\0\100"+
    "\0\u3fc0\0\u4000\0\u4040\0\100\0\u4080\0\u40c0\0\u4100\0\u4140"+
    "\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340"+
    "\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540"+
    "\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740"+
    "\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940"+
    "\0\u4980\0\u49c0\0\100\0\100\0\100\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\100\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\u0200\0\u4d80\0\u4dc0\0\u4e00"+
    "\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000"+
    "\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\100\0\u5300\0\100\0\100\0\100"+
    "\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500"+
    "\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700"+
    "\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880\0\u58c0\0\u5900"+
    "\0\u5940\0\100\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\u5ac0"+
    "\0\u5b00\0\100\0\100\0\100\0\u5b40\0\u5b80\0\u5bc0\0\u5c00"+
    "\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00"+
    "\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0\0\u6000"+
    "\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200"+
    "\0\100\0\u6240\0\u6280\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0"+
    "\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540\0\u6580\0\u65c0"+
    "\0\100\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780"+
    "\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\100"+
    "\0\100\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00"+
    "\0\u6b40\0\u6b80\0\u6bc0\0\100\0\100\0\u6c00\0\u6c40\0\u6c80"+
    "\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\u6dc0\0\100\0\u6e00\0\u6e40"+
    "\0\u6e80\0\100\0\u6ec0\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\11\1\37"+
    "\1\40\2\11\1\41\1\42\1\43\1\44\1\11\1\45"+
    "\1\46\2\11\1\47\6\50\1\11\1\51\1\52\1\2"+
    "\1\11\1\53\2\11\1\52\1\50\1\54\1\11\102\0"+
    "\1\55\15\0\1\56\2\0\1\57\32\0\6\50\11\0"+
    "\1\50\1\54\4\0\1\60\14\0\1\61\2\0\1\57"+
    "\32\0\6\50\11\0\1\50\1\54\6\0\1\62\12\0"+
    "\1\63\63\0\1\64\13\0\1\65\65\0\1\66\11\0"+
    "\1\67\20\0\1\70\2\0\1\71\1\0\1\72\1\73"+
    "\2\0\1\74\2\0\1\75\6\0\1\76\2\0\1\77"+
    "\1\100\16\0\1\11\1\101\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\1\0\3\11\7\0"+
    "\1\102\2\11\1\103\1\0\1\11\17\0\13\11\1\104"+
    "\16\11\2\0\4\11\1\0\3\11\13\0\1\105\1\0"+
    "\1\106\2\0\1\107\66\0\4\11\1\0\1\110\3\0"+
    "\1\111\13\0\32\11\2\0\4\11\1\0\3\11\20\0"+
    "\1\112\62\0\1\113\12\0\1\114\1\0\1\115\76\0"+
    "\1\116\1\117\77\0\1\120\77\0\1\121\77\0\1\122"+
    "\102\0\1\123\32\0\6\54\11\0\2\54\10\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\124\5\11\1\125\22\11"+
    "\2\0\4\11\1\0\3\11\7\0\1\11\1\126\2\11"+
    "\1\0\1\11\17\0\2\11\1\127\27\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\14\11"+
    "\1\130\15\11\2\0\4\11\1\0\3\11\7\0\1\11"+
    "\1\131\2\11\1\0\1\11\17\0\6\11\1\132\1\133"+
    "\22\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\134\5\11\1\135\6\11\1\136"+
    "\12\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\137\16\11\1\140\11\11\2\0"+
    "\4\11\1\0\3\11\7\0\2\11\1\141\1\142\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\143\27\11\2\0"+
    "\4\11\1\0\3\11\7\0\1\11\1\144\2\11\1\0"+
    "\1\11\17\0\7\11\1\145\1\11\1\146\2\11\1\147"+
    "\15\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\7\11\1\150\22\11\2\0\4\11\1\0"+
    "\3\11\7\0\1\11\1\151\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\1\11\1\152"+
    "\2\11\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\3\11\23\0\1\57\32\0\6\50\11\0\1\50\1\153"+
    "\10\0\4\11\1\0\1\11\17\0\7\11\1\154\22\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\32\11\2\0\2\11\1\155\1\11\1\0\3\11"+
    "\56\0\6\54\11\0\2\54\21\0\1\156\77\0\1\157"+
    "\77\0\1\160\77\0\1\161\77\0\1\162\77\0\1\163"+
    "\77\0\1\164\77\0\1\165\77\0\1\166\77\0\1\167"+
    "\134\0\1\170\42\0\1\171\66\0\2\11\1\172\1\11"+
    "\1\0\1\11\17\0\16\11\1\173\13\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\16\11"+
    "\1\174\13\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\10\11\1\175\21\11\2\0\4\11"+
    "\1\0\3\11\20\0\1\176\77\0\1\177\77\0\1\200"+
    "\102\0\1\201\63\0\4\11\1\0\1\11\17\0\2\11"+
    "\1\202\27\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\7\11\1\203\22\11\2\0\4\11"+
    "\1\0\3\11\7\0\3\11\1\204\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\205\21\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\5\11\1\206"+
    "\24\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\5\11\1\207\24\11\2\0\4\11\1\0"+
    "\3\11\7\0\1\11\1\210\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\1\211\2\11"+
    "\1\212\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\14\11\1\213"+
    "\15\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\214\30\11\2\0\4\11\1\0"+
    "\3\11\7\0\2\11\1\215\1\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\11\11\1\216\20\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\16\11\1\217"+
    "\13\11\2\0\4\11\1\0\3\11\7\0\3\11\1\220"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\10\11\1\221\21\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\13\11\1\222\16\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\14\11\1\223\15\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\1\11\1\224\30\11\2\0\4\11\1\0\3\11"+
    "\7\0\3\11\1\225\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\7\11\1\226\22\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\10\11\1\227\21\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\230\25\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\1\11\1\231\30\11\2\0"+
    "\4\11\1\0\3\11\56\0\6\153\11\0\2\153\10\0"+
    "\2\11\1\232\1\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\32\11\2\0\3\11\1\233\1\0\3\11\4\0\1\234"+
    "\100\0\1\235\100\0\1\236\77\0\1\237\77\0\1\240"+
    "\77\0\1\241\77\0\1\242\77\0\1\243\77\0\1\244"+
    "\77\0\1\245\111\0\1\246\65\0\1\247\100\0\3\11"+
    "\1\250\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\7\11\1\251"+
    "\22\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\252\13\0\2\11\1\253\17\11\1\254"+
    "\1\255\1\256\1\257\4\11\2\0\4\11\1\0\3\11"+
    "\7\0\1\11\1\260\2\11\1\0\1\11\17\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\261\15\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\15\11\1\262\14\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\11\11\1\263\20\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\2\11\1\264\27\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\265\27\11\2\0\4\11\1\0\3\11"+
    "\7\0\3\11\1\266\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\16\11\1\267\13\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\5\11\1\270\2\11\1\271"+
    "\21\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\272\27\11\2\0\4\11\1\0"+
    "\3\11\7\0\2\11\1\273\1\11\1\0\1\11\17\0"+
    "\11\11\1\274\20\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\10\11\1\275\21\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\2\11\1\276\27\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\277\27\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\300\21\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\20\11\1\301\11\11\2\0"+
    "\4\11\1\0\3\11\7\0\1\11\1\302\2\11\1\0"+
    "\1\11\17\0\2\11\1\303\27\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\5\11\1\216"+
    "\6\11\1\304\15\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\4\11\1\305\25\11\2\0"+
    "\4\11\1\0\3\11\7\0\1\11\1\306\2\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\7\11\1\307\22\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\3\11\1\310\26\11\2\0\4\11\1\0\3\11\7\0"+
    "\3\11\1\311\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\3\0\1\312"+
    "\13\0\32\11\2\0\4\11\1\0\3\11\5\0\1\313"+
    "\76\0\1\314\101\0\1\315\132\0\1\316\102\0\1\317"+
    "\101\0\1\320\100\0\1\321\102\0\1\322\102\0\1\323"+
    "\106\0\1\324\21\0\1\325\161\0\1\326\16\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\327\30\11\2\0\4\11"+
    "\1\0\3\11\11\0\1\330\75\0\4\11\1\0\1\11"+
    "\17\0\1\11\1\331\30\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\332\13\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\24\11\1\333\5\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\27\11\1\334\2\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\26\11\1\335\3\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\3\11\1\336\26\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\337\13\0\32\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\2\11\1\340\27\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\1\11\1\341\30\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\14\11\1\342\15\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\10\11\1\343\21\11\2\0\4\11\1\0\3\11"+
    "\7\0\2\11\1\344\1\11\1\0\1\11\17\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\4\11\1\345\25\11\2\0\4\11\1\0\3\11"+
    "\7\0\3\11\1\346\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\347\25\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\4\11\1\350\25\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\3\0"+
    "\1\351\13\0\16\11\1\352\3\11\1\353\1\354\1\355"+
    "\1\356\4\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\16\11\1\357\13\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\11\11"+
    "\1\360\20\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\361\30\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\10\11"+
    "\1\362\21\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\10\11\1\363\21\11\2\0\4\11"+
    "\1\0\3\11\7\0\1\11\1\364\2\11\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\10\11\1\365\21\11\2\0\4\11"+
    "\1\0\3\11\71\0\1\366\75\0\1\367\17\0\4\11"+
    "\1\0\1\11\17\0\10\11\1\370\21\11\2\0\4\11"+
    "\1\0\3\11\12\0\1\371\74\0\4\11\1\0\1\11"+
    "\17\0\13\11\1\372\16\11\2\0\4\11\1\0\3\11"+
    "\11\0\1\373\75\0\4\11\1\0\1\11\3\0\1\374"+
    "\13\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\3\0\1\375\13\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\3\0\1\376"+
    "\13\0\32\11\2\0\4\11\1\0\3\11\34\0\1\377"+
    "\52\0\3\11\1\u0100\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\2\11\1\u0101\27\11\2\0\4\11\1\0\3\11\7\0"+
    "\3\11\1\u0102\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\10\11"+
    "\1\u0103\21\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\15\11\1\u0104\14\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\17\0\10\11"+
    "\1\u0105\21\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\6\11\1\u0106\23\11\2\0\4\11"+
    "\1\0\3\11\45\0\1\u0107\41\0\4\11\1\0\1\11"+
    "\17\0\10\11\1\u0108\21\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\u0109\13\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\24\11\1\u010a\5\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\27\11\1\u010b\2\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\26\11\1\u010c\3\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\2\11\1\u010d\27\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\u010e\15\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\6\11\1\u010f\23\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\24\11\1\u0110\1\u0111\4\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\15\11\1\u0112"+
    "\14\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\u0113\27\11\2\0\4\11\1\0"+
    "\3\11\72\0\1\u0114\62\0\1\u0115\66\0\1\u0116\42\0"+
    "\1\11\1\u0117\2\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\3\11\12\0\1\u0118\76\0\1\u0119\77\0"+
    "\1\u011a\77\0\1\u011b\131\0\1\u011c\43\0\4\11\1\0"+
    "\1\11\17\0\30\11\1\u011d\1\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\11\11\1\u011e"+
    "\20\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\u011f\13\0\32\11\2\0\4\11\1\0"+
    "\3\11\11\0\1\u0120\75\0\4\11\1\0\1\11\17\0"+
    "\1\11\1\u0121\30\11\2\0\4\11\1\0\3\11\45\0"+
    "\1\u0122\41\0\4\11\1\0\1\11\3\0\1\u0123\13\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\u0124\13\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u0125\13\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\12\11\1\u0126\17\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\u0127"+
    "\21\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\u0128\30\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\27\11\1\u0129"+
    "\2\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\26\11\1\u012a\3\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\2\11\1\u012b"+
    "\27\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\u012c\30\11\2\0\4\11\1\0"+
    "\3\11\73\0\1\u012d\13\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\u012e\25\11\2\0\4\11\1\0\3\11\44\0"+
    "\1\u012f\45\0\1\u0130\77\0\1\u0131\77\0\1\u0132\130\0"+
    "\1\u0133\43\0\4\11\1\0\1\11\17\0\23\11\1\u0134"+
    "\1\u0135\5\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\2\11\1\u0136\27\11\2\0\4\11"+
    "\1\0\3\11\41\0\1\u0137\50\0\1\u0138\74\0\4\11"+
    "\1\0\1\11\3\0\1\u0139\13\0\32\11\2\0\4\11"+
    "\1\0\3\11\11\0\1\u013a\133\0\1\u013b\77\0\1\u013c"+
    "\77\0\1\u013d\41\0\4\11\1\0\1\11\17\0\32\11"+
    "\1\u013e\1\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\7\11\1\u013f\22\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u0140\13\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\u0141\13\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u0142\13\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\u0143\27\11\2\0\4\11\1\0"+
    "\3\11\56\0\1\u0144\65\0\1\u0145\77\0\1\u0146\77\0"+
    "\1\u0147\103\0\1\u0148\36\0\4\11\1\0\1\11\17\0"+
    "\26\11\1\u0149\3\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\27\11\1\u014a\2\11\2\0"+
    "\4\11\1\0\3\11\44\0\1\u014b\77\0\1\u014c\100\0"+
    "\1\u014d\44\0\1\u014e\76\0\1\u014f\77\0\1\u0150\77\0"+
    "\1\u0151\77\0\1\u0152\1\u0153\21\0\1\u0154\1\u0155\2\0"+
    "\1\u0156\1\u0157\5\0\1\u0158\37\0\4\11\1\0\1\11"+
    "\17\0\11\11\1\u0159\20\11\2\0\4\11\1\0\3\11"+
    "\47\0\1\u015a\77\0\1\u015b\115\0\1\u015c\71\0\1\u015d"+
    "\100\0\1\u015e\100\0\1\u015f\25\0\4\11\1\0\1\11"+
    "\17\0\22\11\1\u0160\7\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\3\0\1\u0161\13\0\32\11"+
    "\2\0\4\11\1\0\3\11\35\0\1\u0162\53\0\1\u0163"+
    "\132\0\1\u0164\45\0\1\u0165\77\0\1\u0166\77\0\1\u0167"+
    "\77\0\1\u0168\76\0\1\u0169\131\0\1\u016a\101\0\1\u016b"+
    "\75\0\1\u016c\100\0\1\u016d\103\0\1\u016e\36\0\4\11"+
    "\1\0\1\11\17\0\15\11\1\u016f\14\11\2\0\4\11"+
    "\1\0\3\11\50\0\1\u0170\77\0\1\u0171\72\0\1\u0172"+
    "\114\0\1\u0173\102\0\1\u0174\76\0\1\u0175\24\0\4\11"+
    "\1\0\1\11\3\0\1\u0176\13\0\32\11\2\0\4\11"+
    "\1\0\3\11\40\0\1\u0177\50\0\1\u0178\100\0\1\u0179"+
    "\143\0\1\u017a\65\0\1\u017b\77\0\1\u017c\77\0\1\u017d"+
    "\77\0\1\u017e\103\0\1\u017f\72\0\1\u0180\46\0\1\u0181"+
    "\74\0\1\u0182\125\0\1\u0183\105\0\1\u0184\43\0\4\11"+
    "\1\0\1\11\17\0\6\11\1\u0185\23\11\2\0\4\11"+
    "\1\0\3\11\43\0\1\u0186\77\0\1\u0187\45\0\1\u0188"+
    "\126\0\1\u0189\102\0\1\u018a\46\0\1\u018b\131\0\1\u018c"+
    "\112\0\1\u018d\100\0\1\u018e\100\0\1\u018f\36\0\1\u0190"+
    "\77\0\1\u0191\127\0\1\u0192\65\0\1\u0193\113\0\1\u0194"+
    "\36\0\1\u0195\76\0\1\u0196\77\0\1\u0197\77\0\1\u0198"+
    "\101\0\1\u0199\130\0\1\u019a\43\0\1\u019b\141\0\1\u019c"+
    "\100\0\1\u019d\105\0\1\u019e\102\0\1\u019f\76\0\1\u01a0"+
    "\62\0\1\u01a1\77\0\1\u01a2\52\0\1\u01a3\77\0\1\u01a4"+
    "\127\0\1\u01a5\41\0\1\u01a6\131\0\1\u01a7\77\0\1\u01a8"+
    "\77\0\1\u01a9\77\0\1\u01aa\42\0\1\u01ab\142\0\1\u01ac"+
    "\71\0\1\u01ad\45\0\1\u01ae\77\0\1\u01af\132\0\1\u01b0"+
    "\77\0\1\u01b1\70\0\1\u01b2\112\0\1\u01b3\46\0\1\u01b4"+
    "\137\0\1\u01b5\100\0\1\u01b6\54\0\1\u01b7\113\0\1\u01b8"+
    "\75\0\1\u01b9\64\0\1\u01ba\106\0\1\u01bb\77\0\1\u01bc"+
    "\45\0\1\u01bd\77\0\1\u01be\151\0\1\u01bf\33\0\1\u01c0"+
    "\124\0\1\u01c1\115\0\1\u01c2\76\0\1\u01c3\52\0\1\u01c4"+
    "\112\0\1\u01c5\65\0\1\u01c6\115\0\1\u01c7\77\0\1\u01c8"+
    "\67\0\1\u01c9\77\0\1\u01ca\53\0\1\u01cb\124\0\1\u01cc"+
    "\44\0\1\u01cd\123\0\1\u01ce\125\0\1\u01cf\65\0\1\u01d0"+
    "\77\0\1\u01d1\101\0\1\u01d2\77\0\1\u01d3\70\0\1\u01d4"+
    "\44\0\1\u01d5\131\0\1\u01d6\117\0\1\u01d7\73\0\1\u01d8"+
    "\55\0\1\u01d9\77\0\1\u01da\113\0\1\u01db\77\0\1\u01dc"+
    "\37\0\1\u01dd\131\0\1\u01de\107\0\1\u01df\102\0\1\u01e0"+
    "\103\0\1\u01e1\62\0\1\u01e2\77\0\1\u01e3\67\0\1\u01e4"+
    "\77\0\1\u01e5\105\0\1\u01e6\107\0\1\u01e7\75\0\1\u01e8"+
    "\107\0\1\u01e9\103\0\1\u01ea\77\0\1\u01eb\57\0\1\u01ec"+
    "\77\0\1\u01ed\105\0\1\u01ee\75\0\1\u01ef\63\0\1\u01f0"+
    "\117\0\1\u01f1\32\0\1\u01f2\100\0\1\u01f3\153\0\1\u01f4"+
    "\77\0\1\u01f5\63\0\1\u01f6\63\0\1\u01f7\107\0\1\u01f8"+
    "\43\0\1\u01f9\76\0\1\u01fa\122\0\1\u01fb\100\0\1\u01fc"+
    "\100\0\1\u01fd\107\0\1\u01fe\117\0\1\u01ff\55\0\1\u0200"+
    "\103\0\1\u0201\72\0\1\u0202\101\0\1\u0203\100\0\1\u0204"+
    "\117\0\1\u0205\60\0\1\u0206\73\0\1\u0207\46\0\1\u0208"+
    "\153\0\1\u0209\52\0\1\u020a\106\0\1\u020b\77\0\1\u020c"+
    "\65\0\1\u020d\101\0\1\u020e\103\0\1\u020f\76\0\1\u0210"+
    "\77\0\1\u0211\71\0\1\u0212\52\0\1\u0213\76\0\1\u0214"+
    "\101\0\1\u0215\132\0\1\u0216\105\0\1\u0217\37\0\1\u0218"+
    "\135\0\1\u0219\100\0\1\u021a\64\0\1\u021b\125\0\1\u021c"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\10\11\16\1\1\11\2\1\2\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\4\1\1\11\1\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\4\11\1\0\32\1\14\0\4\1\4\11"+
    "\32\1\14\0\2\1\1\0\37\1\1\0\12\11\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\1\0\11\1"+
    "\1\0\14\1\2\0\1\1\1\0\1\1\5\0\7\1"+
    "\1\0\1\1\1\0\12\1\1\0\2\11\1\1\5\0"+
    "\2\1\2\0\1\1\4\0\7\1\1\11\1\1\5\0"+
    "\3\1\10\0\1\1\3\0\1\1\1\11\3\0\1\11"+
    "\2\1\1\0\1\11\14\0\1\1\6\0\1\1\16\0"+
    "\1\1\3\0\3\11\4\0\1\11\12\0\1\1\26\0"+
    "\1\11\1\0\3\11\31\0\1\11\7\0\3\11\34\0"+
    "\1\11\17\0\1\11\16\0\2\11\12\0\2\11\10\0"+
    "\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 118: break;
          case 2: 
            { imprimir("Operador de soma", yytext());
            }
          case 119: break;
          case 3: 
            { imprimir("Operador de subtracao", yytext());
            }
          case 120: break;
          case 4: 
            { imprimir("Operador de multiplicacao", yytext());
            }
          case 121: break;
          case 5: 
            { imprimir("Operador de divisao", yytext());
            }
          case 122: break;
          case 6: 
            { imprimir("Operador de resto", yytext());
            }
          case 123: break;
          case 7: 
            { imprimir("Identificador", yytext());
            }
          case 124: break;
          case 8: 
            { imprimir("Operador and", yytext());
            }
          case 125: break;
          case 9: 
            { imprimir("Operador or", yytext());
            }
          case 126: break;
          case 10: 
            { imprimir("Operador xor", yytext());
            }
          case 127: break;
          case 11: 
            { imprimir("Operador de menor que", yytext());
            }
          case 128: break;
          case 12: 
            { imprimir("Operador de maior que", yytext());
            }
          case 129: break;
          case 13: 
            { imprimir("Operador de atribuicao", yytext());
            }
          case 130: break;
          case 14: 
            { imprimir("Operador de negacao", yytext());
            }
          case 131: break;
          case 15: 
            { imprimir("Caractere dois pontos", yytext());
            }
          case 132: break;
          case 16: 
            { imprimir("Caractere ponto", yytext());
            }
          case 133: break;
          case 17: 
            { imprimir("Caractere parentese esquerdo", yytext());
            }
          case 134: break;
          case 18: 
            { imprimir("Caractere parentese direito", yytext());
            }
          case 135: break;
          case 19: 
            { imprimir("Caractere chave esquerda", yytext());
            }
          case 136: break;
          case 20: 
            { imprimir("Caractere chave direita", yytext());
            }
          case 137: break;
          case 21: 
            { imprimir("Caractere colchete esquerdo", yytext());
            }
          case 138: break;
          case 22: 
            { imprimir("Caractere colchete direito", yytext());
            }
          case 139: break;
          case 23: 
            { imprimir("Caractere virgula", yytext());
            }
          case 140: break;
          case 24: 
            { imprimir("Caractere ponto e virgula", yytext());
            }
          case 141: break;
          case 25: 
            { imprimir("Número Inteiro", yytext());
            }
          case 142: break;
          case 26: 
            { imprimir("Espaço em branco", yytext());
            }
          case 143: break;
          case 27: 
            { imprimir("Número Float", yytext());
            }
          case 144: break;
          case 28: 
            { imprimir("Operador de incremento", yytext());
            }
          case 145: break;
          case 29: 
            { imprimir("Atribuicao de soma", yytext());
            }
          case 146: break;
          case 30: 
            { imprimir("Operador de decremento", yytext());
            }
          case 147: break;
          case 31: 
            { imprimir("Atribuicao de subtracao", yytext());
            }
          case 148: break;
          case 32: 
            { imprimir("Atribuicao de multiplicacao", yytext());
            }
          case 149: break;
          case 33: 
            { imprimir("Atribuicao de divisao", yytext());
            }
          case 150: break;
          case 34: 
            { imprimir("Atribuicao de resto", yytext());
            }
          case 151: break;
          case 35: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 152: break;
          case 36: 
            { imprimir("Opeerador land", yytext());
            }
          case 153: break;
          case 37: 
            { imprimir("Operador and not", yytext());
            }
          case 154: break;
          case 38: 
            { imprimir("Atribuicao de and", yytext());
            }
          case 155: break;
          case 39: 
            { imprimir("Operador lor", yytext());
            }
          case 156: break;
          case 40: 
            { imprimir("Atribuicao de or", yytext());
            }
          case 157: break;
          case 41: 
            { imprimir("Atribuicao de xor", yytext());
            }
          case 158: break;
          case 42: 
            { imprimir("Operador arrow", yytext());
            }
          case 159: break;
          case 43: 
            { imprimir("Operador shift left", yytext());
            }
          case 160: break;
          case 44: 
            { imprimir("Operador de menor igual", yytext());
            }
          case 161: break;
          case 45: 
            { imprimir("Operador shift right", yytext());
            }
          case 162: break;
          case 46: 
            { imprimir("Operador de maior igual", yytext());
            }
          case 163: break;
          case 47: 
            { imprimir("Operador de igualdade", yytext());
            }
          case 164: break;
          case 48: 
            { imprimir("Operador de diferente", yytext());
            }
          case 165: break;
          case 49: 
            { imprimir("Operador de define", yytext());
            }
          case 166: break;
          case 50: 
            { imprimir("Palavra reservada go", yytext());
            }
          case 167: break;
          case 51: 
            { imprimir("Palavra reservada map", yytext());
            }
          case 168: break;
          case 52: 
            { imprimir("Atribuicao de and not", yytext());
            }
          case 169: break;
          case 53: 
            { imprimir("Atribuicao de sl", yytext());
            }
          case 170: break;
          case 54: 
            { imprimir("Atribuicao de sr", yytext());
            }
          case 171: break;
          case 55: 
            { imprimir("Operador de elipse", yytext());
            }
          case 172: break;
          case 56: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 173: break;
          case 57: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 174: break;
          case 58: 
            { imprimir("Identificador de main", yytext());
            }
          case 175: break;
          case 59: 
            { imprimir("Palavra reservada else", yytext());
            }
          case 176: break;
          case 60: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 177: break;
          case 61: 
            { imprimir("Palavra reservada chan", yytext());
            }
          case 178: break;
          case 62: 
            { imprimir("Valor boolean", yytext());
            }
          case 179: break;
          case 63: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 180: break;
          case 64: 
            { imprimir("Palavra reservada func", yytext());
            }
          case 181: break;
          case 65: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 182: break;
          case 66: 
            { imprimir("Final do comentario", yytext());
            }
          case 183: break;
          case 67: 
            { imprimir("Inicio do comentario", yytext());
            }
          case 184: break;
          case 68: 
            { imprimir("Forrmato porcento", yytext());
            }
          case 185: break;
          case 69: 
            { imprimir("Forrmato string", yytext());
            }
          case 186: break;
          case 70: 
            { imprimir("Forrmato boolean", yytext());
            }
          case 187: break;
          case 71: 
            { imprimir("Forrmato inteiro", yytext());
            }
          case 188: break;
          case 72: 
            { imprimir("Forrmato float", yytext());
            }
          case 189: break;
          case 73: 
            { imprimir("Forrmato apontador", yytext());
            }
          case 190: break;
          case 74: 
            { imprimir("Forrmato default", yytext());
            }
          case 191: break;
          case 75: 
            { imprimir("Forrmato indefinido", yytext());
            }
          case 192: break;
          case 76: 
            { imprimir("Forrmato tipo generico", yytext());
            }
          case 193: break;
          case 77: 
            { imprimir("Palavra reservada break", yytext());
            }
          case 194: break;
          case 78: 
            { imprimir("Palavra reservada range", yytext());
            }
          case 195: break;
          case 79: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 196: break;
          case 80: 
            { imprimir("Palavra reservada defer", yytext());
            }
          case 197: break;
          case 81: 
            { imprimir("Palavra reservada import", yytext());
            }
          case 198: break;
          case 82: 
            { imprimir("Palavra reservada return", yytext());
            }
          case 199: break;
          case 83: 
            { imprimir("Palavra reservada select", yytext());
            }
          case 200: break;
          case 84: 
            { imprimir("Palavra reservada struct", yytext());
            }
          case 201: break;
          case 85: 
            { imprimir("Palavra reservada switch", yytext());
            }
          case 202: break;
          case 86: 
            { imprimir("Forrmato valor", yytext());
            }
          case 203: break;
          case 87: 
            { imprimir("Tipo de variável int", yytext());
            }
          case 204: break;
          case 88: 
            { imprimir("Palavra reservada default", yytext());
            }
          case 205: break;
          case 89: 
            { imprimir("Palavra reservada package", yytext());
            }
          case 206: break;
          case 90: 
            { imprimir("Palavra reservada EOF var", yytext());
            }
          case 207: break;
          case 91: 
            { imprimir("Palavra reservada continue", yytext());
            }
          case 208: break;
          case 92: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 209: break;
          case 93: 
            { imprimir("Tipo de variável int 8bits", yytext());
            }
          case 210: break;
          case 94: 
            { imprimir("Tipo de variável bool", yytext());
            }
          case 211: break;
          case 95: 
            { imprimir("Tipo de variável int não-definido", yytext());
            }
          case 212: break;
          case 96: 
            { imprimir("Tipo de variável int 16bits", yytext());
            }
          case 213: break;
          case 97: 
            { imprimir("Tipo de variável int 64bits", yytext());
            }
          case 214: break;
          case 98: 
            { imprimir("Tipo de variável int 32bits", yytext());
            }
          case 215: break;
          case 99: 
            { imprimir("Tipo de variável int não-definido de 8bits", yytext());
            }
          case 216: break;
          case 100: 
            { imprimir("Palavra reservada fallthrough", yytext());
            }
          case 217: break;
          case 101: 
            { imprimir("Tipo de variável string", yytext());
            }
          case 218: break;
          case 102: 
            { imprimir("Tipo de variável int não-definido de 16bits", yytext());
            }
          case 219: break;
          case 103: 
            { imprimir("Tipo de variável int não-definido de 64bits", yytext());
            }
          case 220: break;
          case 104: 
            { imprimir("Tipo de variável int não-definido de 32bits", yytext());
            }
          case 221: break;
          case 105: 
            { imprimir("Tipo de variável int ", yytext());
            }
          case 222: break;
          case 106: 
            { imprimir("Tipo de variável float 64bits", yytext());
            }
          case 223: break;
          case 107: 
            { imprimir("Tipo de variável float 32bits", yytext());
            }
          case 224: break;
          case 108: 
            { imprimir("Tipo de variável apontador", yytext());
            }
          case 225: break;
          case 109: 
            { imprimir("Tipo de variável numero complexo de 64bits", yytext());
            }
          case 226: break;
          case 110: 
            { imprimir("Tipo de variável numero complexo de 128bits", yytext());
            }
          case 227: break;
          case 111: 
            { imprimir("Tipo de variável untyped int", yytext());
            }
          case 228: break;
          case 112: 
            { imprimir("Tipo de variável untyped nil", yytext());
            }
          case 229: break;
          case 113: 
            { imprimir("Tipo de variável untyped bool", yytext());
            }
          case 230: break;
          case 114: 
            { imprimir("Tipo de variável untyped rune", yytext());
            }
          case 231: break;
          case 115: 
            { imprimir("Tipo de variável untyped float", yytext());
            }
          case 232: break;
          case 116: 
            { imprimir("Tipo de variável untyped string", yytext());
            }
          case 233: break;
          case 117: 
            { imprimir("Tipo de variável untyped complex", yytext());
            }
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
