/* The following code was generated by JFlex 1.6.1 */

package analiseLexica;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morgok/Desktop/Compiladores/Compiladores/src/analiseLexica/Linguagem.lex</tt>
 */
class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\76\1\77\1\77\1\76\22\0\1\65\1\20\1\0"+
    "\1\66\1\100\1\5\1\12\1\0\1\23\1\24\1\3\1\1\1\31"+
    "\1\2\1\22\1\4\1\74\1\56\1\61\1\60\1\62\1\101\1\57"+
    "\1\101\1\55\1\101\1\21\1\32\1\15\1\17\1\16\2\0\4\102"+
    "\1\70\1\72\10\102\1\71\1\64\3\102\1\67\6\102\1\25\1\75"+
    "\1\26\1\14\1\102\1\0\1\7\1\33\1\37\1\45\1\35\1\46"+
    "\1\50\1\41\1\10\1\102\1\36\1\47\1\6\1\11\1\42\1\51"+
    "\1\102\1\34\1\40\1\43\1\44\1\54\1\52\1\63\1\53\1\102"+
    "\1\27\1\13\1\30\7\0\1\77\u1fa2\0\1\77\1\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\13\7\1\31\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\1\37\1\40\1\41\1\42\3\7\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\0\21\7\1\62"+
    "\2\7\1\31\1\7\1\63\2\7\1\64\1\65\1\66"+
    "\1\67\17\7\1\70\3\7\1\71\1\72\6\7\1\73"+
    "\1\74\1\75\5\7\1\76\1\77\3\7\1\100\1\101"+
    "\3\7\1\102\1\0\1\103\1\7\1\104\5\7\1\105"+
    "\2\7\1\106\1\7\1\0\1\107\1\7\1\110\1\111"+
    "\1\112\4\7\1\0\1\7\1\113\1\7\1\114\1\7"+
    "\1\0\1\115\1\7\1\116\1\0\1\7\1\0\1\7"+
    "\1\0\1\117\u01db\0\2\120\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\103"+
    "\0\u081d\0\103\0\103\0\u081d\0\103\0\103\0\103\0\103"+
    "\0\103\0\u0860\0\u08a3\0\u08e6\0\u0218\0\103\0\u0929\0\103"+
    "\0\u0218\0\103\0\103\0\103\0\u096c\0\103\0\u09af\0\103"+
    "\0\103\0\103\0\103\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0218\0\u0ff7\0\u103a\0\103\0\103\0\103"+
    "\0\103\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u0218\0\u146a\0\u14ad\0\u14f0\0\u0218\0\u0218\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u0218\0\u0218\0\u0218\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u0218\0\u0218\0\u1814\0\u1857"+
    "\0\u189a\0\u0218\0\u0218\0\u18dd\0\u1920\0\u1963\0\u0218\0\u19a6"+
    "\0\u0218\0\u19e9\0\u0218\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u0218\0\u1b7b\0\u1bbe\0\u0218\0\u1c01\0\u1c44\0\u0218\0\u1c87"+
    "\0\u0218\0\u0218\0\u0218\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u0218\0\u1e5c\0\u0218\0\u1e9f\0\u1ee2\0\u0218\0\u1f25"+
    "\0\u0218\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u0218\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef"+
    "\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f"+
    "\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237"+
    "\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f"+
    "\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667"+
    "\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f"+
    "\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97"+
    "\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df"+
    "\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7"+
    "\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u550f"+
    "\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727"+
    "\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f"+
    "\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57"+
    "\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f"+
    "\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87"+
    "\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f"+
    "\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u62ee\0\u6331\0\u6374\0\u63b7"+
    "\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf"+
    "\0\u6612\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u67e7"+
    "\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff"+
    "\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u6b91\0\u6bd4\0\u6c17"+
    "\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23\0\u6d66\0\u6da9\0\u6dec\0\u6e2f"+
    "\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\u6fc1\0\u7004\0\u7047"+
    "\0\u708a\0\u70cd\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c\0\u725f"+
    "\0\u72a2\0\u72e5\0\u7328\0\u736b\0\u73ae\0\u73f1\0\u7434\0\u7477"+
    "\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u75c6\0\u7609\0\u764c\0\u768f"+
    "\0\u76d2\0\u7715\0\u7758\0\u779b\0\u77de\0\u7821\0\u7864\0\u78a7"+
    "\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u7a39\0\u7a7c\0\u7abf"+
    "\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7"+
    "\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u7e69\0\u7eac\0\u7eef"+
    "\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb\0\u803e\0\u8081\0\u80c4\0\u8107"+
    "\0\u814a\0\u818d\0\u81d0\0\u8213\0\u8256\0\u8299\0\u82dc\0\u831f"+
    "\0\u8362\0\u83a5\0\u83e8\0\u842b\0\u846e\0\u84b1\0\u84f4\0\u8537"+
    "\0\u857a\0\u85bd\0\u8600\0\u8643\0\u8686\0\u86c9\0\u870c\0\u874f"+
    "\0\u8792\0\u87d5\0\u8818\0\u885b\0\u889e\0\u88e1\0\u8924\0\u8967"+
    "\0\u89aa\0\u89ed\0\u8a30\0\u8a73\0\u8ab6\0\u8af9\0\u8b3c\0\u8b7f"+
    "\0\u8bc2\0\u8c05\0\u8c48\0\u8c8b\0\u8cce\0\u8d11\0\u8d54\0\u8d97"+
    "\0\u8dda\0\u8e1d\0\u8e60\0\u8ea3\0\u8ee6\0\u8f29\0\u8f6c\0\u8faf"+
    "\0\u8ff2\0\u9035\0\u9078\0\u90bb\0\u90fe\0\u9141\0\u9184\0\u91c7"+
    "\0\u920a\0\u924d\0\u9290\0\u92d3\0\u9316\0\u9359\0\u939c\0\u93df"+
    "\0\u9422\0\u9465\0\u94a8\0\u94eb\0\u952e\0\u9571\0\u95b4\0\u95f7"+
    "\0\u963a\0\u967d\0\u96c0\0\u9703\0\u9746\0\u9789\0\u97cc\0\u980f"+
    "\0\u9852\0\u9895\0\u98d8\0\u991b\0\u995e\0\u99a1\0\u99e4\0\u9a27"+
    "\0\u9a6a\0\u9aad\0\u9af0\0\u9b33\0\u9b76\0\u9bb9\0\u9bfc\0\u9c3f"+
    "\0\u9c82\0\u9cc5\0\u9cc5\0\103\0\u9d08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\11\1\37"+
    "\1\40\2\11\1\41\1\11\1\42\1\43\1\11\1\44"+
    "\1\45\2\11\1\46\6\47\2\11\1\50\1\2\4\11"+
    "\1\50\1\51\1\2\1\50\1\0\1\2\1\47\1\11"+
    "\104\0\1\52\15\0\1\53\2\0\1\54\32\0\6\47"+
    "\11\0\1\51\4\0\1\47\3\0\1\55\14\0\1\56"+
    "\2\0\1\54\32\0\6\47\11\0\1\51\4\0\1\47"+
    "\20\0\1\57\102\0\1\60\102\0\1\61\71\0\1\11"+
    "\1\62\2\11\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\1\63\2\11\1\64\1\0\1\11\17\0\13\11"+
    "\1\65\16\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\12\0\1\66\1\0\1\67\2\0\1\70\71\0\4\11"+
    "\1\0\1\71\3\0\1\72\13\0\32\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\17\0\1\73\65\0\1\74"+
    "\12\0\1\75\1\0\1\76\101\0\1\77\1\100\102\0"+
    "\1\101\102\0\1\102\102\0\1\103\105\0\1\104\32\0"+
    "\6\51\11\0\1\51\4\0\1\51\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\105\5\11\1\106\22\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\1\11\1\107"+
    "\2\11\1\0\1\11\17\0\2\11\1\110\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\14\11\1\111\15\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\1\11\1\112\2\11\1\0"+
    "\1\11\17\0\6\11\1\113\1\114\22\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\115\5\11\1\116\6\11\1\117\12\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\120\16\11\1\121\11\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\2\11\1\122\27\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\1\11\1\123\2\11"+
    "\1\0\1\11\17\0\7\11\1\124\1\11\1\125\20\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\7\11\1\126\22\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\1\11\1\127\2\11"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\1\11\1\130\2\11\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\22\0\1\54\32\0\6\47\11\0\1\131\4\0\1\47"+
    "\56\0\6\51\11\0\1\51\4\0\1\51\7\0\2\11"+
    "\1\132\1\11\1\0\1\11\17\0\16\11\1\133\13\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\16\11\1\134\13\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\10\11\1\135\21\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\17\0\1\136\102\0\1\137\102\0\1\140"+
    "\105\0\1\141\66\0\4\11\1\0\1\11\17\0\2\11"+
    "\1\142\27\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\4\11\1\0\1\11\17\0\7\11\1\143\22\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\3\11"+
    "\1\144\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\145\21\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\5\11\1\146"+
    "\24\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\5\11\1\147\24\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\1\11\1\150"+
    "\2\11\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\3\11\1\151\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\4\11\1\0\1\11\17\0\14\11\1\152\15\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\153\30\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\2\11\1\154\1\11"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\4\11\1\0\1\11\17\0\11\11"+
    "\1\155\20\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\4\11\1\0\1\11\17\0\16\11\1\156\13\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\13\11\1\157\16\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\160\15\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\4\11\1\0\1\11\17\0\1\11"+
    "\1\161\30\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\3\11\1\162\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\163\21\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\164\25\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\1\11\1\165"+
    "\30\11\2\0\4\11\1\0\1\11\4\0\2\11\55\0"+
    "\6\131\11\0\1\131\4\0\1\131\7\0\3\11\1\166"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\4\11\1\0\1\11\17\0\7\11"+
    "\1\167\22\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\4\11\1\0\1\11\17\0\2\11\1\170\27\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\1\11"+
    "\1\171\2\11\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\172\15\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\4\11\1\0\1\11\17\0\15\11"+
    "\1\173\14\11\2\0\4\11\1\0\1\11\4\0\2\11"+
    "\6\0\4\11\1\0\1\11\17\0\11\11\1\174\20\11"+
    "\2\0\4\11\1\0\1\11\4\0\2\11\6\0\4\11"+
    "\1\0\1\11\17\0\2\11\1\175\27\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\176\27\11\2\0\4\11\1\0\1\11"+
    "\4\0\2\11\6\0\3\11\1\177\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\5\11\1\200\2\11\1\201"+
    "\21\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\202\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\11\11\1\203\20\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\204\21\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\2\11\1\205"+
    "\27\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\206\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\1\11\1\207"+
    "\2\11\1\0\1\11\17\0\2\11\1\210\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\5\11\1\155\6\11\1\211\15\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\4\11\1\212\25\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\7\11\1\213\22\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\3\11\1\214"+
    "\26\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\1\11\1\215\30\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\216\30\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\3\11\1\217\26\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\3\0\1\220\13\0"+
    "\32\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\221\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\222\30\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\223\21\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\2\11\1\224\1\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\4\11\1\225\25\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\4\11\1\226\25\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\4\11\1\227\25\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\11\11\1\230"+
    "\20\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\1\11\1\231\30\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\232\21\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\1\11\1\233\2\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\10\11\1\234"+
    "\21\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\13\11\1\235\16\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\33\0\1\236\55\0"+
    "\3\11\1\237\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\1\0\1\11\4\0\2\11\6\0\3\11\1\240\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\10\11\1\241"+
    "\21\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\10\11\1\242\21\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\6\11\1\243\23\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\14\11\1\244\15\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\6\11\1\245"+
    "\23\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\15\11\1\246\14\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\1\11\1\247"+
    "\2\11\1\0\1\11\17\0\32\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\42\0\1\250\46\0\4\11\1\0"+
    "\1\11\17\0\11\11\1\251\20\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\252\21\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\1\11\1\253"+
    "\30\11\2\0\4\11\1\0\1\11\4\0\2\11\6\0"+
    "\4\11\1\0\1\11\17\0\2\11\1\254\27\11\2\0"+
    "\4\11\1\0\1\11\4\0\2\11\6\0\4\11\1\0"+
    "\1\11\17\0\4\11\1\255\25\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\42\0\1\256\46\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\257\27\11\2\0\4\11\1\0"+
    "\1\11\4\0\2\11\6\0\4\11\1\0\1\11\17\0"+
    "\7\11\1\260\22\11\2\0\4\11\1\0\1\11\4\0"+
    "\2\11\6\0\4\11\1\0\1\11\17\0\2\11\1\261"+
    "\27\11\2\0\4\11\1\0\1\11\4\0\2\11\47\0"+
    "\1\262\41\0\4\11\1\0\1\11\17\0\11\11\1\263"+
    "\20\11\2\0\4\11\1\0\1\11\4\0\2\11\10\0"+
    "\1\264\100\0\4\11\1\0\1\11\17\0\15\11\1\265"+
    "\14\11\2\0\4\11\1\0\1\11\4\0\2\11\11\0"+
    "\1\266\77\0\4\11\1\0\1\11\17\0\6\11\1\267"+
    "\23\11\2\0\4\11\1\0\1\11\4\0\2\11\43\0"+
    "\1\270\56\0\1\271\73\0\1\272\103\0\1\273\134\0"+
    "\1\274\47\0\1\275\103\0\1\276\134\0\1\277\114\0"+
    "\1\300\44\0\1\301\73\0\1\302\103\0\1\303\134\0"+
    "\1\304\114\0\1\305\35\0\1\306\103\0\1\307\134\0"+
    "\1\310\115\0\1\311\103\0\1\312\42\0\1\313\73\0"+
    "\1\314\103\0\1\315\134\0\1\316\115\0\1\317\103\0"+
    "\1\320\33\0\1\321\103\0\1\322\134\0\1\323\117\0"+
    "\1\324\103\0\1\325\40\0\1\326\73\0\1\327\103\0"+
    "\1\330\134\0\1\331\117\0\1\332\103\0\1\333\31\0"+
    "\1\334\103\0\1\335\134\0\1\336\116\0\1\337\105\0"+
    "\1\340\37\0\1\341\73\0\1\342\103\0\1\343\134\0"+
    "\1\344\116\0\1\345\105\0\1\346\64\0\1\347\46\0"+
    "\1\350\103\0\1\351\134\0\1\352\56\0\1\353\127\0"+
    "\1\354\46\0\1\355\103\0\1\356\134\0\1\357\103\0"+
    "\1\360\46\0\1\361\103\0\1\362\134\0\1\363\114\0"+
    "\1\364\44\0\1\365\127\0\1\366\46\0\1\367\103\0"+
    "\1\370\134\0\1\371\114\0\1\372\71\0\1\373\46\0"+
    "\1\374\103\0\1\375\134\0\1\376\115\0\1\377\103\0"+
    "\1\u0100\42\0\1\u0101\127\0\1\u0102\46\0\1\u0103\103\0"+
    "\1\u0104\134\0\1\u0105\115\0\1\u0106\103\0\1\u0107\67\0"+
    "\1\u0108\46\0\1\u0109\103\0\1\u010a\134\0\1\u010b\117\0"+
    "\1\u010c\103\0\1\u010d\40\0\1\u010e\127\0\1\u010f\46\0"+
    "\1\u0110\103\0\1\u0111\134\0\1\u0112\117\0\1\u0113\103\0"+
    "\1\u0114\65\0\1\u0115\46\0\1\u0116\103\0\1\u0117\134\0"+
    "\1\u0118\116\0\1\u0119\105\0\1\u011a\37\0\1\u011b\127\0"+
    "\1\u011c\46\0\1\u011d\103\0\1\u011e\134\0\1\u011f\116\0"+
    "\1\u0120\105\0\1\u0121\64\0\1\u0122\46\0\1\u0123\103\0"+
    "\1\u0124\134\0\1\u0125\110\0\1\u0126\74\0\1\u0127\73\0"+
    "\1\u0128\65\0\1\u0129\127\0\1\u012a\46\0\1\u012b\103\0"+
    "\1\u012c\134\0\1\u012d\110\0\1\u012e\74\0\1\u012f\73\0"+
    "\1\u0130\114\0\1\u0131\103\0\1\u0132\75\0\1\u0133\47\0"+
    "\1\u0134\136\0\1\u0135\117\0\1\u0136\103\0\1\u0137\40\0"+
    "\1\u0138\131\0\1\u0139\103\0\1\u013a\75\0\1\u013b\47\0"+
    "\1\u013c\136\0\1\u013d\117\0\1\u013e\103\0\1\u013f\67\0"+
    "\1\u0140\103\0\1\u0141\75\0\1\u0142\47\0\1\u0143\136\0"+
    "\1\u0144\116\0\1\u0145\105\0\1\u0146\37\0\1\u0147\131\0"+
    "\1\u0148\103\0\1\u0149\75\0\1\u014a\47\0\1\u014b\136\0"+
    "\1\u014c\116\0\1\u014d\105\0\1\u014e\57\0\1\u014f\105\0"+
    "\1\u0150\46\0\1\u0151\145\0\1\u0152\100\0\1\u0153\70\0"+
    "\1\u0154\130\0\1\u0155\76\0\1\u0156\105\0\1\u0157\37\0"+
    "\1\u0158\122\0\1\u0159\105\0\1\u015a\46\0\1\u015b\145\0"+
    "\1\u015c\100\0\1\u015d\70\0\1\u015e\130\0\1\u015f\76\0"+
    "\1\u0160\105\0\1\u0161\57\0\1\u0162\105\0\1\u0163\46\0"+
    "\1\u0164\145\0\1\u0165\100\0\1\u0166\70\0\1\u0167\130\0"+
    "\1\u0168\75\0\1\u0169\105\0\1\u016a\76\0\1\u016b\44\0"+
    "\1\u016c\122\0\1\u016d\105\0\1\u016e\46\0\1\u016f\145\0"+
    "\1\u0170\100\0\1\u0171\70\0\1\u0172\130\0\1\u0173\75\0"+
    "\1\u0174\105\0\1\u0175\76\0\1\u0176\65\0\1\u0177\105\0"+
    "\1\u0178\73\0\1\u0179\56\0\1\u017a\103\0\1\u017b\141\0"+
    "\1\u017c\51\0\1\u017d\123\0\1\u017e\105\0\1\u017f\73\0"+
    "\1\u0180\56\0\1\u0181\103\0\1\u0182\141\0\1\u0183\116\0"+
    "\1\u0184\60\0\1\u0185\50\0\1\u0186\103\0\1\u0187\134\0"+
    "\1\u0188\74\0\1\u0189\101\0\1\u018a\65\0\1\u018b\147\0"+
    "\1\u018c\60\0\1\u018d\50\0\1\u018e\103\0\1\u018f\134\0"+
    "\1\u0190\74\0\1\u0191\101\0\1\u0192\112\0\1\u0193\47\0"+
    "\1\u0194\134\0\1\u0195\112\0\1\u0196\100\0\1\u0197\66\0"+
    "\1\u0198\112\0\1\u0199\122\0\1\u019a\50\0\1\u019b\111\0"+
    "\1\u019c\102\0\1\u019d\107\0\1\u019e\52\0\1\u019f\127\0"+
    "\1\u01a0\47\0\1\u01a1\134\0\1\u01a2\112\0\1\u01a3\100\0"+
    "\1\u01a4\66\0\1\u01a5\112\0\1\u01a6\122\0\1\u01a7\50\0"+
    "\1\u01a8\111\0\1\u01a9\102\0\1\u01aa\107\0\1\u01ab\77\0"+
    "\1\u01ac\47\0\1\u01ad\134\0\1\u01ae\112\0\1\u01af\100\0"+
    "\1\u01b0\66\0\1\u01b1\112\0\1\u01b2\122\0\1\u01b3\25\0"+
    "\1\u01b4\103\0\1\u01b5\134\0\1\u01b6\56\0\1\u01b7\127\0"+
    "\1\u01b8\47\0\1\u01b9\134\0\1\u01ba\112\0\1\u01bb\100\0"+
    "\1\u01bc\66\0\1\u01bd\112\0\1\u01be\122\0\1\u01bf\25\0"+
    "\1\u01c0\103\0\1\u01c1\134\0\1\u01c2\103\0\1\u01c3\47\0"+
    "\1\u01c4\134\0\1\u01c5\112\0\1\u01c6\100\0\1\u01c7\66\0"+
    "\1\u01c8\112\0\1\u01c9\122\0\1\u01ca\51\0\1\u01cb\112\0"+
    "\1\u01cc\47\0\1\u01cd\126\0\1\u01ce\64\0\1\u01cf\127\0"+
    "\1\u01d0\47\0\1\u01d1\134\0\1\u01d2\112\0\1\u01d3\100\0"+
    "\1\u01d4\66\0\1\u01d5\112\0\1\u01d6\122\0\1\u01d7\51\0"+
    "\1\u01d8\112\0\1\u01d9\47\0\1\u01da\126\0\1\u01db\111\0"+
    "\1\u01dc\47\0\1\u01dd\134\0\1\u01de\112\0\1\u01df\100\0"+
    "\1\u01e0\66\0\1\u01e1\112\0\1\u01e2\122\0\1\u01e3\63\0"+
    "\1\u01e4\103\0\1\u01e5\75\0\1\u01e6\47\0\1\u01e7\136\0"+
    "\1\u01e8\56\0\1\u01e9\127\0\1\u01ea\47\0\1\u01eb\134\0"+
    "\1\u01ec\112\0\1\u01ed\100\0\1\u01ee\66\0\1\u01ef\112\0"+
    "\1\u01f0\122\0\1\u01f1\63\0\1\u01f2\103\0\1\u01f3\75\0"+
    "\1\u01f4\47\0\1\u01f5\136\0\1\u01f6\103\0\1\u01f7\47\0"+
    "\1\u01f8\134\0\1\u01f9\112\0\1\u01fa\100\0\1\u01fb\66\0"+
    "\1\u01fc\112\0\1\u01fd\122\0\1\u01fe\54\0\1\u01ff\105\0"+
    "\1\u0200\46\0\1\u0201\145\0\1\u0202\100\0\1\u0203\70\0"+
    "\1\u0204\130\0\1\u0205\36\0\1\u0206\127\0\1\u0207\47\0"+
    "\1\u0208\134\0\1\u0209\112\0\1\u020a\100\0\1\u020b\66\0"+
    "\1\u020c\112\0\1\u020d\122\0\1\u020e\54\0\1\u020f\105\0"+
    "\1\u0210\46\0\1\u0211\145\0\1\u0212\100\0\1\u0213\70\0"+
    "\1\u0214\130\0\1\u0215\63\0\1\u0216\47\0\1\u0217\134\0"+
    "\1\u0218\112\0\1\u0219\100\0\1\u021a\66\0\1\u021b\112\0"+
    "\1\u021c\122\0\1\u021d\55\0\1\u021e\105\0\1\u021f\73\0"+
    "\1\u0220\56\0\1\u0221\103\0\1\u0222\141\0\1\u0223\51\0"+
    "\1\u0224\127\0\1\u0225\47\0\1\u0226\134\0\1\u0227\112\0"+
    "\1\u0228\100\0\1\u0229\66\0\1\u022a\112\0\1\u022b\122\0"+
    "\1\u022c\55\0\1\u022d\105\0\1\u022e\73\0\1\u022f\56\0"+
    "\1\u0230\103\0\1\u0231\141\0\1\u0232\76\0\1\u0233\47\0"+
    "\1\u0234\134\0\1\u0235\112\0\1\u0236\100\0\1\u0237\66\0"+
    "\1\u0238\112\0\1\u0239\122\0\1\u023a\26\0\1\u023b\101\0"+
    "\1\u023c\141\0\1\u023d\52\0\1\u023e\127\0\1\u023f\47\0"+
    "\1\u0240\134\0\1\u0241\112\0\1\u0242\100\0\1\u0243\66\0"+
    "\1\u0244\112\0\1\u0245\122\0\1\u0246\26\0\1\u0247\101\0"+
    "\1\u0248\141\0\1\u0249\40\0\1\u024a\135\0\1\u024b\61\0"+
    "\1\u024c\70\0\1\u024d\135\0\1\u024e\47\0\1\u024f\142\0"+
    "\1\u0250\54\0\1\u0251\70\0\1\u0252\142\0\1\u0253\42\0"+
    "\1\u0254\143\0\1\u0255\53\0\1\u0256\70\0\1\u0257\143\0"+
    "\1\u0258\41\0\1\u0259\140\0\1\u025a\56\0\1\u025b\70\0"+
    "\1\u025c\140\0\1\u025d\44\0\1\u025e\151\0\1\u025f\45\0"+
    "\1\u0260\70\0\1\u0261\151\0\1\u0262\33\0\1\u0263\163\0"+
    "\1\u0264\70\0\1\u0265\45\0\1\u0266\70\0\1\u0267\163\0"+
    "\1\u0268\70\0\1\u0269\33\0\1\u026a\164\0\1\u026b\32\0"+
    "\1\u026c\70\0\1\u026d\164\0\1\u026e\20\0\1\u026f\102\0"+
    "\1\u0270\114\0\1\u0271\70\0\1\u0272\102\0\1\u0273\102\0"+
    "\1\u0274\146\0\1\u0275\50\0\1\u0276\70\0\1\u0277\146\0"+
    "\1\u0278\36\0\1\u0279\160\0\1\u027a\36\0\1\u027b\70\0"+
    "\1\u027c\160\0\1\u027d\23\0\1\u027e\101\0\1\u027f\116\0"+
    "\1\u0280\67\0\1\u0281\101\0\1\u0282\102\0\1\u0283\103\0"+
    "\1\u0284\115\0\1\u0285\66\0\1\u0286\103\0\1\u0287\166\0"+
    "\1\u0288\103\0\1\u0289\103\0\1\u028a\27\0\1\u028b\153\0"+
    "\1\u028c\103\0\1\u028d\103\0\1\u028e\12\0\1\u028f\52\0"+
    "\6\u0290\11\0\1\u0290\4\0\1\u0290\56\0\6\u0290\11\0"+
    "\1\u0290\4\0\1\u0290\56\0\6\u0290\11\0\1\u0290\1\u0291"+
    "\3\0\1\u0290\1\0\10\u0292\1\u0293\65\u0292\2\0\1\u0293"+
    "\2\u0292\10\0\1\u0294\44\0\6\u0295\11\0\1\u0295\3\0"+
    "\1\u0294\1\u0295\11\0\1\u0294\67\0\1\u0294\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40267];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\10\11\14\1\1\11\1\1\2\11"+
    "\1\0\5\11\4\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\4\11\1\0\31\1\4\11\56\1"+
    "\1\0\15\1\1\0\11\1\1\0\5\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\u01db\0\1\1"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 81: break;
          case 2: 
            { imprimir("Operador de soma", yytext());
            }
          case 82: break;
          case 3: 
            { imprimir("Operador de subtracao", yytext());
            }
          case 83: break;
          case 4: 
            { imprimir("Operador de multiplicacao", yytext());
            }
          case 84: break;
          case 5: 
            { imprimir("Operador de divisao", yytext());
            }
          case 85: break;
          case 6: 
            { imprimir("Operador de resto", yytext());
            }
          case 86: break;
          case 7: 
            { imprimir("Identificador", yytext());
            }
          case 87: break;
          case 8: 
            { imprimir("Operador and", yytext());
            }
          case 88: break;
          case 9: 
            { imprimir("Operador or", yytext());
            }
          case 89: break;
          case 10: 
            { imprimir("Operador xor", yytext());
            }
          case 90: break;
          case 11: 
            { imprimir("Operador de menor que", yytext());
            }
          case 91: break;
          case 12: 
            { imprimir("Operador de maior que", yytext());
            }
          case 92: break;
          case 13: 
            { imprimir("Operador de atribuicao", yytext());
            }
          case 93: break;
          case 14: 
            { imprimir("Operador de negacao", yytext());
            }
          case 94: break;
          case 15: 
            { imprimir("Caractere dois pontos", yytext());
            }
          case 95: break;
          case 16: 
            { imprimir("Caractere ponto", yytext());
            }
          case 96: break;
          case 17: 
            { imprimir("Caractere parentese esquerdo", yytext());
            }
          case 97: break;
          case 18: 
            { imprimir("Caractere parentese direito", yytext());
            }
          case 98: break;
          case 19: 
            { imprimir("Caractere chave esquerda", yytext());
            }
          case 99: break;
          case 20: 
            { imprimir("Caractere chave direita", yytext());
            }
          case 100: break;
          case 21: 
            { imprimir("Caractere colchete esquerdo", yytext());
            }
          case 101: break;
          case 22: 
            { imprimir("Caractere colchete direito", yytext());
            }
          case 102: break;
          case 23: 
            { imprimir("Caractere virgula", yytext());
            }
          case 103: break;
          case 24: 
            { imprimir("Caractere ponto e virgula", yytext());
            }
          case 104: break;
          case 25: 
            { imprimir("Número Inteiro", yytext());
            }
          case 105: break;
          case 26: 
            { imprimir("Espaço em branco", yytext());
            }
          case 106: break;
          case 27: 
            { imprimir("Número Float", yytext());
            }
          case 107: break;
          case 28: 
            { imprimir("Operador de incremento", yytext());
            }
          case 108: break;
          case 29: 
            { imprimir("Atribuicao de soma", yytext());
            }
          case 109: break;
          case 30: 
            { imprimir("Operador de decremento", yytext());
            }
          case 110: break;
          case 31: 
            { imprimir("Atribuicao de subtracao", yytext());
            }
          case 111: break;
          case 32: 
            { imprimir("Atribuicao de multiplicacao", yytext());
            }
          case 112: break;
          case 33: 
            { imprimir("Atribuicao de divisao", yytext());
            }
          case 113: break;
          case 34: 
            { imprimir("Atribuicao de resto", yytext());
            }
          case 114: break;
          case 35: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 115: break;
          case 36: 
            { imprimir("Opeerador land", yytext());
            }
          case 116: break;
          case 37: 
            { imprimir("Operador and not", yytext());
            }
          case 117: break;
          case 38: 
            { imprimir("Atribuicao de and", yytext());
            }
          case 118: break;
          case 39: 
            { imprimir("Operador lor", yytext());
            }
          case 119: break;
          case 40: 
            { imprimir("Atribuicao de or", yytext());
            }
          case 120: break;
          case 41: 
            { imprimir("Atribuicao de xor", yytext());
            }
          case 121: break;
          case 42: 
            { imprimir("Operador arrow", yytext());
            }
          case 122: break;
          case 43: 
            { imprimir("Operador shift left", yytext());
            }
          case 123: break;
          case 44: 
            { imprimir("Operador de menor igual", yytext());
            }
          case 124: break;
          case 45: 
            { imprimir("Operador shift right", yytext());
            }
          case 125: break;
          case 46: 
            { imprimir("Operador de maior igual", yytext());
            }
          case 126: break;
          case 47: 
            { imprimir("Operador de igualdade", yytext());
            }
          case 127: break;
          case 48: 
            { imprimir("Operador de diferente", yytext());
            }
          case 128: break;
          case 49: 
            { imprimir("Operador de define", yytext());
            }
          case 129: break;
          case 50: 
            { imprimir("Palavra reservada go", yytext());
            }
          case 130: break;
          case 51: 
            { imprimir("Palavra reservada map", yytext());
            }
          case 131: break;
          case 52: 
            { imprimir("Atribuicao de and not", yytext());
            }
          case 132: break;
          case 53: 
            { imprimir("Atribuicao de sl", yytext());
            }
          case 133: break;
          case 54: 
            { imprimir("Atribuicao de sr", yytext());
            }
          case 134: break;
          case 55: 
            { imprimir("Operador de elipse", yytext());
            }
          case 135: break;
          case 56: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 136: break;
          case 57: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 137: break;
          case 58: 
            { imprimir("Identificador de main", yytext());
            }
          case 138: break;
          case 59: 
            { imprimir("Palavra reservada else", yytext());
            }
          case 139: break;
          case 60: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 140: break;
          case 61: 
            { imprimir("Palavra reservada chan", yytext());
            }
          case 141: break;
          case 62: 
            { imprimir("Valor boolean", yytext());
            }
          case 142: break;
          case 63: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 143: break;
          case 64: 
            { imprimir("Palavra reservada func", yytext());
            }
          case 144: break;
          case 65: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 145: break;
          case 66: 
            { imprimir("Palavra reservada break", yytext());
            }
          case 146: break;
          case 67: 
            { imprimir("Palavra reservada range", yytext());
            }
          case 147: break;
          case 68: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 148: break;
          case 69: 
            { imprimir("Palavra reservada defer", yytext());
            }
          case 149: break;
          case 70: 
            { imprimir("Palavra reservada import", yytext());
            }
          case 150: break;
          case 71: 
            { imprimir("Palavra reservada return", yytext());
            }
          case 151: break;
          case 72: 
            { imprimir("Palavra reservada select", yytext());
            }
          case 152: break;
          case 73: 
            { imprimir("Palavra reservada struct", yytext());
            }
          case 153: break;
          case 74: 
            { imprimir("Palavra reservada switch", yytext());
            }
          case 154: break;
          case 75: 
            { imprimir("Palavra reservada default", yytext());
            }
          case 155: break;
          case 76: 
            { imprimir("Palavra reservada package", yytext());
            }
          case 156: break;
          case 77: 
            { imprimir("Palavra reservada continue", yytext());
            }
          case 157: break;
          case 78: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 158: break;
          case 79: 
            { imprimir("Palavra reservada fallthrough", yytext());
            }
          case 159: break;
          case 80: 
            { imprimir("Número Complexo", yytext());
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
