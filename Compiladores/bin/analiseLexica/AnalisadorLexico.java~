/* The following code was generated by JFlex 1.6.1 */

package analiseLexica;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morgok/Desktop/Compiladores/Projeto-Compiladores-master/Compiladores/src/analiseLexica/Linguagem.lex</tt>
 */
public class AnalisadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\74\1\100\1\100\1\74\22\0\1\66\1\20\1\0"+
    "\1\67\1\0\1\5\1\12\1\0\1\23\1\24\1\3\1\1\1\31"+
    "\1\2\1\22\1\4\1\76\1\57\1\62\1\61\1\63\1\75\1\60"+
    "\1\75\1\56\1\75\1\21\1\32\1\15\1\17\1\16\2\0\4\77"+
    "\1\71\1\73\10\77\1\72\1\65\3\77\1\70\6\77\1\25\1\0"+
    "\1\26\1\14\1\77\1\33\1\7\1\34\1\40\1\46\1\36\1\47"+
    "\1\51\1\42\1\10\1\77\1\37\1\50\1\6\1\11\1\43\1\52"+
    "\1\77\1\35\1\41\1\44\1\45\1\55\1\53\1\64\1\54\1\77"+
    "\1\27\1\13\1\30\7\0\1\100\u1fa2\0\1\100\1\100\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\14\7\1\32\1\7\1\33\1\7\1\34"+
    "\1\35\1\36\1\0\1\37\1\40\1\0\1\41\1\0"+
    "\1\42\1\0\1\43\11\0\3\7\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\0\24\7\1\63\2\7"+
    "\1\32\2\7\14\0\1\7\1\64\2\7\1\65\1\66"+
    "\1\67\1\70\22\7\1\71\4\7\1\72\2\7\14\0"+
    "\1\73\1\7\1\0\11\7\1\74\1\75\1\76\7\7"+
    "\1\77\1\100\5\7\1\101\1\7\1\102\2\7\1\0"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\0\1\115\1\7\1\0\1\7\1\0"+
    "\3\7\1\116\1\0\1\117\2\7\1\120\5\7\1\0"+
    "\7\7\1\121\4\7\2\0\1\122\1\0\1\7\5\0"+
    "\1\123\2\7\1\124\1\7\1\125\1\126\1\0\1\7"+
    "\1\0\12\7\1\0\1\127\1\130\1\7\5\0\2\7"+
    "\2\0\1\7\4\0\1\7\1\131\3\7\1\132\1\7"+
    "\1\133\1\7\5\0\2\7\1\134\10\0\1\7\3\0"+
    "\1\135\1\136\3\0\1\137\2\7\1\0\1\140\14\0"+
    "\1\7\6\0\1\7\16\0\1\7\3\0\1\141\1\142"+
    "\1\143\4\0\1\144\12\0\1\145\26\0\1\146\1\0"+
    "\1\147\1\150\1\151\31\0\1\152\7\0\1\153\1\154"+
    "\1\155\34\0\1\156\17\0\1\157\16\0\1\160\1\161"+
    "\12\0\1\162\1\163\10\0\1\164\3\0\1\165\1\0"+
    "\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\101\0\u0861\0\u08a2\0\101\0\101\0\u08a2"+
    "\0\101\0\101\0\u08e3\0\101\0\u0924\0\101\0\u0965\0\101"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0208\0\101\0\u0cb2\0\101"+
    "\0\u0208\0\101\0\101\0\101\0\u0cf3\0\101\0\u0d34\0\101"+
    "\0\101\0\101\0\101\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u0208\0\u179d\0\u17de\0\101\0\101"+
    "\0\101\0\101\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u0208\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u0208\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u0208\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u0208\0\u0208\0\u0208\0\u240e"+
    "\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u0208\0\u0208"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u0208\0\u271a\0\u0208"+
    "\0\u275b\0\u279c\0\u27dd\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\u281e\0\101\0\u285f"+
    "\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u0208\0\u2a26"+
    "\0\u0208\0\u2a67\0\u2aa8\0\u0208\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u0208\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b"+
    "\0\u0208\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142"+
    "\0\u0208\0\u3183\0\u31c4\0\u0208\0\u3205\0\u0208\0\u0208\0\u3246"+
    "\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\101\0\101\0\u35d4"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u0208"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u0208\0\u3aa7\0\101\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u0208\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u0208\0\101\0\u3ffc\0\u403d\0\u407e"+
    "\0\101\0\u40bf\0\u4100\0\u4141\0\101\0\u4182\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24"+
    "\0\u4a65\0\u4aa6\0\u4ae7\0\101\0\101\0\101\0\u4b28\0\u4b69"+
    "\0\u4baa\0\u4beb\0\101\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30"+
    "\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u0208\0\u4eb6\0\u4ef7"+
    "\0\u4f38\0\u4f79\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff"+
    "\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307"+
    "\0\u5348\0\u5389\0\u53ca\0\u540b\0\101\0\u544c\0\101\0\101"+
    "\0\101\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23"+
    "\0\u5a64\0\u5aa5\0\101\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea"+
    "\0\u5c2b\0\u5c6c\0\101\0\101\0\101\0\u5cad\0\u5cee\0\u5d2f"+
    "\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37"+
    "\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f"+
    "\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347"+
    "\0\u6388\0\101\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e"+
    "\0\u654f\0\u6590\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716"+
    "\0\u6757\0\101\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd"+
    "\0\u691e\0\u695f\0\u69a0\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5"+
    "\0\101\0\101\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b"+
    "\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\101\0\101\0\u6db0\0\u6df1"+
    "\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\101\0\u6fb8"+
    "\0\u6ff9\0\u703a\0\101\0\u707b\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\11"+
    "\1\40\1\41\2\11\1\42\1\43\1\44\1\45\1\11"+
    "\1\46\1\47\2\11\1\50\6\51\1\11\1\52\1\53"+
    "\1\2\1\11\1\54\2\11\1\53\1\51\1\55\1\11"+
    "\103\0\1\56\15\0\1\57\2\0\1\60\33\0\6\51"+
    "\11\0\1\51\1\55\4\0\1\61\14\0\1\62\2\0"+
    "\1\60\33\0\6\51\11\0\1\51\1\55\6\0\1\63"+
    "\12\0\1\64\64\0\1\65\13\0\1\66\66\0\1\67"+
    "\11\0\1\70\21\0\1\71\2\0\1\72\1\0\1\73"+
    "\1\74\2\0\1\75\2\0\1\76\6\0\1\77\2\0"+
    "\1\100\1\101\16\0\1\11\1\102\2\11\1\0\1\11"+
    "\20\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\32\11\2\0\4\11\1\0\3\11"+
    "\7\0\1\103\2\11\1\104\1\0\1\11\20\0\13\11"+
    "\1\105\16\11\2\0\4\11\1\0\3\11\13\0\1\106"+
    "\1\0\1\107\2\0\1\110\67\0\4\11\1\0\1\111"+
    "\3\0\1\112\14\0\32\11\2\0\4\11\1\0\3\11"+
    "\20\0\1\113\63\0\1\114\12\0\1\115\1\0\1\116"+
    "\77\0\1\117\1\120\100\0\1\121\100\0\1\122\100\0"+
    "\1\123\103\0\1\124\33\0\6\55\11\0\2\55\10\0"+
    "\4\11\1\0\1\11\20\0\1\11\1\125\5\11\1\126"+
    "\22\11\2\0\4\11\1\0\3\11\7\0\1\11\1\127"+
    "\2\11\1\0\1\11\20\0\2\11\1\130\27\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\14\11\1\131\15\11\2\0\4\11\1\0\3\11\7\0"+
    "\1\11\1\132\2\11\1\0\1\11\20\0\6\11\1\133"+
    "\1\134\22\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\2\11\1\135\5\11\1\136\6\11"+
    "\1\137\12\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\1\11\1\140\16\11\1\141\11\11"+
    "\2\0\4\11\1\0\3\11\7\0\2\11\1\142\1\143"+
    "\1\0\1\11\20\0\32\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\2\11\1\144\27\11"+
    "\2\0\4\11\1\0\3\11\7\0\1\11\1\145\2\11"+
    "\1\0\1\11\20\0\7\11\1\146\1\11\1\147\2\11"+
    "\1\150\15\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\7\11\1\151\22\11\2\0\4\11"+
    "\1\0\3\11\7\0\1\11\1\152\2\11\1\0\1\11"+
    "\20\0\32\11\2\0\4\11\1\0\3\11\7\0\1\11"+
    "\1\153\2\11\1\0\1\11\20\0\32\11\2\0\4\11"+
    "\1\0\3\11\23\0\1\60\33\0\6\51\11\0\1\51"+
    "\1\154\10\0\4\11\1\0\1\11\20\0\7\11\1\155"+
    "\22\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\32\11\2\0\2\11\1\156\1\11\1\0"+
    "\3\11\57\0\6\55\11\0\2\55\21\0\1\157\100\0"+
    "\1\160\100\0\1\161\100\0\1\162\100\0\1\163\100\0"+
    "\1\164\100\0\1\165\100\0\1\166\100\0\1\167\100\0"+
    "\1\170\136\0\1\171\42\0\1\172\67\0\2\11\1\173"+
    "\1\11\1\0\1\11\20\0\16\11\1\174\13\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\16\11\1\175\13\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\10\11\1\176\21\11\2\0"+
    "\4\11\1\0\3\11\20\0\1\177\100\0\1\200\100\0"+
    "\1\201\103\0\1\202\64\0\4\11\1\0\1\11\20\0"+
    "\2\11\1\203\27\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\7\11\1\204\22\11\2\0"+
    "\4\11\1\0\3\11\7\0\3\11\1\205\1\0\1\11"+
    "\20\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\10\11\1\206\21\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\5\11"+
    "\1\207\24\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\5\11\1\210\24\11\2\0\4\11"+
    "\1\0\3\11\7\0\1\11\1\211\2\11\1\0\1\11"+
    "\20\0\32\11\2\0\4\11\1\0\3\11\7\0\1\212"+
    "\2\11\1\213\1\0\1\11\20\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\14\11"+
    "\1\214\15\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\1\11\1\215\30\11\2\0\4\11"+
    "\1\0\3\11\7\0\2\11\1\216\1\11\1\0\1\11"+
    "\20\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\11\11\1\217\20\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\16\11"+
    "\1\220\13\11\2\0\4\11\1\0\3\11\7\0\3\11"+
    "\1\221\1\0\1\11\20\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\10\11\1\222"+
    "\21\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\13\11\1\223\16\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\14\11\1\224"+
    "\15\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\1\11\1\225\30\11\2\0\4\11\1\0"+
    "\3\11\7\0\3\11\1\226\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\7\11\1\227\22\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\10\11\1\230\21\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\4\11\1\231\25\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\1\11\1\232\30\11"+
    "\2\0\4\11\1\0\3\11\57\0\6\154\11\0\2\154"+
    "\10\0\2\11\1\233\1\11\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\32\11\2\0\3\11\1\234\1\0\3\11\4\0"+
    "\1\235\101\0\1\236\101\0\1\237\100\0\1\240\100\0"+
    "\1\241\100\0\1\242\100\0\1\243\100\0\1\244\100\0"+
    "\1\245\100\0\1\246\112\0\1\247\66\0\1\250\101\0"+
    "\3\11\1\251\1\0\1\11\20\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\7\11"+
    "\1\252\22\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\3\0\1\253\14\0\2\11\1\254\17\11"+
    "\1\255\1\256\1\257\1\260\4\11\2\0\4\11\1\0"+
    "\3\11\7\0\1\11\1\261\2\11\1\0\1\11\20\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\14\11\1\262\15\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\15\11\1\263"+
    "\14\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\11\11\1\264\20\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\2\11\1\265"+
    "\27\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\2\11\1\266\27\11\2\0\4\11\1\0"+
    "\3\11\7\0\3\11\1\267\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\16\11\1\270\13\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\5\11\1\271\2\11"+
    "\1\272\21\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\2\11\1\273\27\11\2\0\4\11"+
    "\1\0\3\11\7\0\2\11\1\274\1\11\1\0\1\11"+
    "\20\0\11\11\1\275\20\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\10\11\1\276\21\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\2\11\1\277\27\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\2\11\1\300\27\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\10\11\1\301\21\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\20\11\1\302\11\11"+
    "\2\0\4\11\1\0\3\11\7\0\1\11\1\303\2\11"+
    "\1\0\1\11\20\0\2\11\1\304\27\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\5\11"+
    "\1\217\6\11\1\305\15\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\4\11\1\306\25\11"+
    "\2\0\4\11\1\0\3\11\7\0\1\11\1\307\2\11"+
    "\1\0\1\11\20\0\32\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\7\11\1\310\22\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\3\11\1\311\26\11\2\0\4\11\1\0\3\11"+
    "\7\0\3\11\1\312\1\0\1\11\20\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\3\0"+
    "\1\313\14\0\32\11\2\0\4\11\1\0\3\11\5\0"+
    "\1\314\77\0\1\315\102\0\1\316\134\0\1\317\103\0"+
    "\1\320\102\0\1\321\101\0\1\322\103\0\1\323\103\0"+
    "\1\324\107\0\1\325\21\0\1\326\163\0\1\327\16\0"+
    "\4\11\1\0\1\11\20\0\1\11\1\330\30\11\2\0"+
    "\4\11\1\0\3\11\11\0\1\331\76\0\4\11\1\0"+
    "\1\11\20\0\1\11\1\332\30\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\333\14\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\24\11\1\334\5\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\27\11\1\335"+
    "\2\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\26\11\1\336\3\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\3\11\1\337"+
    "\26\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\3\0\1\340\14\0\32\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\2\11\1\341"+
    "\27\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\1\11\1\342\30\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\14\11\1\343"+
    "\15\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\10\11\1\344\21\11\2\0\4\11\1\0"+
    "\3\11\7\0\2\11\1\345\1\11\1\0\1\11\20\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\4\11\1\346\25\11\2\0\4\11\1\0"+
    "\3\11\7\0\3\11\1\347\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\4\11\1\350\25\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\4\11\1\351\25\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\3\0\1\352\14\0\16\11\1\353\3\11\1\354\1\355"+
    "\1\356\1\357\4\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\16\11\1\360\13\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\11\11\1\361\20\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\1\11\1\362\30\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\10\11\1\363\21\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\10\11\1\364\21\11\2\0"+
    "\4\11\1\0\3\11\7\0\1\11\1\365\2\11\1\0"+
    "\1\11\20\0\32\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\10\11\1\366\21\11\2\0"+
    "\4\11\1\0\3\11\72\0\1\367\76\0\1\370\17\0"+
    "\4\11\1\0\1\11\20\0\10\11\1\371\21\11\2\0"+
    "\4\11\1\0\3\11\12\0\1\372\75\0\4\11\1\0"+
    "\1\11\20\0\13\11\1\373\16\11\2\0\4\11\1\0"+
    "\3\11\11\0\1\374\76\0\4\11\1\0\1\11\3\0"+
    "\1\375\14\0\32\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\3\0\1\376\14\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\3\0"+
    "\1\377\14\0\32\11\2\0\4\11\1\0\3\11\35\0"+
    "\1\u0100\52\0\3\11\1\u0101\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\7\0\4\11\1\0\1\11"+
    "\20\0\2\11\1\u0102\27\11\2\0\4\11\1\0\3\11"+
    "\7\0\3\11\1\u0103\1\0\1\11\20\0\32\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\10\11\1\u0104\21\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\15\11\1\u0105\14\11\2\0"+
    "\4\11\1\0\3\11\7\0\4\11\1\0\1\11\20\0"+
    "\10\11\1\u0106\21\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\6\11\1\u0107\23\11\2\0"+
    "\4\11\1\0\3\11\46\0\1\u0108\41\0\4\11\1\0"+
    "\1\11\20\0\10\11\1\u0109\21\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u010a\14\0"+
    "\32\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\24\11\1\u010b\5\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\27\11\1\u010c"+
    "\2\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\26\11\1\u010d\3\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\2\11\1\u010e"+
    "\27\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\14\11\1\u010f\15\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\20\0\6\11\1\u0110"+
    "\23\11\2\0\4\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\20\0\24\11\1\u0111\1\u0112\4\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\15\11"+
    "\1\u0113\14\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\2\11\1\u0114\27\11\2\0\4\11"+
    "\1\0\3\11\73\0\1\u0115\63\0\1\u0116\67\0\1\u0117"+
    "\42\0\1\11\1\u0118\2\11\1\0\1\11\20\0\32\11"+
    "\2\0\4\11\1\0\3\11\12\0\1\u0119\77\0\1\u011a"+
    "\100\0\1\u011b\100\0\1\u011c\133\0\1\u011d\43\0\4\11"+
    "\1\0\1\11\20\0\30\11\1\u011e\1\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\11\11"+
    "\1\u011f\20\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\3\0\1\u0120\14\0\32\11\2\0\4\11"+
    "\1\0\3\11\11\0\1\u0121\76\0\4\11\1\0\1\11"+
    "\20\0\1\11\1\u0122\30\11\2\0\4\11\1\0\3\11"+
    "\46\0\1\u0123\41\0\4\11\1\0\1\11\3\0\1\u0124"+
    "\14\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\3\0\1\u0125\14\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\3\0\1\u0126"+
    "\14\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\12\11\1\u0127\17\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\10\11"+
    "\1\u0128\21\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\1\11\1\u0129\30\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\27\11"+
    "\1\u012a\2\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\26\11\1\u012b\3\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\20\0\2\11"+
    "\1\u012c\27\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\1\11\1\u012d\30\11\2\0\4\11"+
    "\1\0\3\11\74\0\1\u012e\13\0\4\11\1\0\1\11"+
    "\20\0\4\11\1\u012f\25\11\2\0\4\11\1\0\3\11"+
    "\45\0\1\u0130\45\0\1\u0131\100\0\1\u0132\100\0\1\u0133"+
    "\132\0\1\u0134\43\0\4\11\1\0\1\11\20\0\23\11"+
    "\1\u0135\1\u0136\5\11\2\0\4\11\1\0\3\11\7\0"+
    "\4\11\1\0\1\11\20\0\2\11\1\u0137\27\11\2\0"+
    "\4\11\1\0\3\11\42\0\1\u0138\50\0\1\u0139\75\0"+
    "\4\11\1\0\1\11\3\0\1\u013a\14\0\32\11\2\0"+
    "\4\11\1\0\3\11\11\0\1\u013b\135\0\1\u013c\100\0"+
    "\1\u013d\100\0\1\u013e\41\0\4\11\1\0\1\11\20\0"+
    "\32\11\1\u013f\1\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\7\11\1\u0140\22\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\3\0\1\u0141"+
    "\14\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\3\0\1\u0142\14\0\32\11\2\0\4\11"+
    "\1\0\3\11\7\0\4\11\1\0\1\11\3\0\1\u0143"+
    "\14\0\32\11\2\0\4\11\1\0\3\11\7\0\4\11"+
    "\1\0\1\11\20\0\2\11\1\u0144\27\11\2\0\4\11"+
    "\1\0\3\11\57\0\1\u0145\66\0\1\u0146\100\0\1\u0147"+
    "\100\0\1\u0148\104\0\1\u0149\36\0\4\11\1\0\1\11"+
    "\20\0\26\11\1\u014a\3\11\2\0\4\11\1\0\3\11"+
    "\7\0\4\11\1\0\1\11\20\0\27\11\1\u014b\2\11"+
    "\2\0\4\11\1\0\3\11\45\0\1\u014c\100\0\1\u014d"+
    "\101\0\1\u014e\44\0\1\u014f\77\0\1\u0150\100\0\1\u0151"+
    "\100\0\1\u0152\100\0\1\u0153\1\u0154\22\0\1\u0155\1\u0156"+
    "\2\0\1\u0157\1\u0158\5\0\1\u0159\37\0\4\11\1\0"+
    "\1\11\20\0\11\11\1\u015a\20\11\2\0\4\11\1\0"+
    "\3\11\50\0\1\u015b\100\0\1\u015c\116\0\1\u015d\72\0"+
    "\1\u015e\101\0\1\u015f\101\0\1\u0160\25\0\4\11\1\0"+
    "\1\11\20\0\22\11\1\u0161\7\11\2\0\4\11\1\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\u0162\14\0"+
    "\32\11\2\0\4\11\1\0\3\11\36\0\1\u0163\53\0"+
    "\1\u0164\134\0\1\u0165\45\0\1\u0166\100\0\1\u0167\100\0"+
    "\1\u0168\100\0\1\u0169\77\0\1\u016a\133\0\1\u016b\102\0"+
    "\1\u016c\76\0\1\u016d\101\0\1\u016e\104\0\1\u016f\36\0"+
    "\4\11\1\0\1\11\20\0\15\11\1\u0170\14\11\2\0"+
    "\4\11\1\0\3\11\51\0\1\u0171\100\0\1\u0172\73\0"+
    "\1\u0173\115\0\1\u0174\103\0\1\u0175\77\0\1\u0176\24\0"+
    "\4\11\1\0\1\11\3\0\1\u0177\14\0\32\11\2\0"+
    "\4\11\1\0\3\11\41\0\1\u0178\50\0\1\u0179\101\0"+
    "\1\u017a\145\0\1\u017b\66\0\1\u017c\100\0\1\u017d\100\0"+
    "\1\u017e\100\0\1\u017f\104\0\1\u0180\73\0\1\u0181\46\0"+
    "\1\u0182\75\0\1\u0183\127\0\1\u0184\106\0\1\u0185\43\0"+
    "\4\11\1\0\1\11\20\0\6\11\1\u0186\23\11\2\0"+
    "\4\11\1\0\3\11\44\0\1\u0187\100\0\1\u0188\45\0"+
    "\1\u0189\130\0\1\u018a\103\0\1\u018b\46\0\1\u018c\133\0"+
    "\1\u018d\113\0\1\u018e\101\0\1\u018f\101\0\1\u0190\36\0"+
    "\1\u0191\100\0\1\u0192\131\0\1\u0193\66\0\1\u0194\114\0"+
    "\1\u0195\36\0\1\u0196\77\0\1\u0197\100\0\1\u0198\100\0"+
    "\1\u0199\102\0\1\u019a\132\0\1\u019b\43\0\1\u019c\143\0"+
    "\1\u019d\101\0\1\u019e\106\0\1\u019f\103\0\1\u01a0\77\0"+
    "\1\u01a1\63\0\1\u01a2\100\0\1\u01a3\52\0\1\u01a4\100\0"+
    "\1\u01a5\131\0\1\u01a6\41\0\1\u01a7\133\0\1\u01a8\100\0"+
    "\1\u01a9\100\0\1\u01aa\100\0\1\u01ab\42\0\1\u01ac\144\0"+
    "\1\u01ad\72\0\1\u01ae\45\0\1\u01af\100\0\1\u01b0\134\0"+
    "\1\u01b1\100\0\1\u01b2\71\0\1\u01b3\113\0\1\u01b4\46\0"+
    "\1\u01b5\141\0\1\u01b6\101\0\1\u01b7\55\0\1\u01b8\114\0"+
    "\1\u01b9\76\0\1\u01ba\65\0\1\u01bb\107\0\1\u01bc\100\0"+
    "\1\u01bd\45\0\1\u01be\100\0\1\u01bf\153\0\1\u01c0\33\0"+
    "\1\u01c1\126\0\1\u01c2\116\0\1\u01c3\77\0\1\u01c4\53\0"+
    "\1\u01c5\113\0\1\u01c6\66\0\1\u01c7\116\0\1\u01c8\100\0"+
    "\1\u01c9\70\0\1\u01ca\100\0\1\u01cb\53\0\1\u01cc\126\0"+
    "\1\u01cd\44\0\1\u01ce\125\0\1\u01cf\126\0\1\u01d0\66\0"+
    "\1\u01d1\100\0\1\u01d2\102\0\1\u01d3\100\0\1\u01d4\71\0"+
    "\1\u01d5\44\0\1\u01d6\133\0\1\u01d7\120\0\1\u01d8\74\0"+
    "\1\u01d9\56\0\1\u01da\100\0\1\u01db\114\0\1\u01dc\100\0"+
    "\1\u01dd\37\0\1\u01de\133\0\1\u01df\110\0\1\u01e0\103\0"+
    "\1\u01e1\104\0\1\u01e2\63\0\1\u01e3\100\0\1\u01e4\70\0"+
    "\1\u01e5\100\0\1\u01e6\106\0\1\u01e7\110\0\1\u01e8\76\0"+
    "\1\u01e9\110\0\1\u01ea\104\0\1\u01eb\100\0\1\u01ec\60\0"+
    "\1\u01ed\100\0\1\u01ee\106\0\1\u01ef\76\0\1\u01f0\64\0"+
    "\1\u01f1\120\0\1\u01f2\32\0\1\u01f3\101\0\1\u01f4\155\0"+
    "\1\u01f5\100\0\1\u01f6\64\0\1\u01f7\64\0\1\u01f8\110\0"+
    "\1\u01f9\43\0\1\u01fa\77\0\1\u01fb\124\0\1\u01fc\101\0"+
    "\1\u01fd\101\0\1\u01fe\110\0\1\u01ff\120\0\1\u0200\56\0"+
    "\1\u0201\104\0\1\u0202\73\0\1\u0203\102\0\1\u0204\101\0"+
    "\1\u0205\120\0\1\u0206\61\0\1\u0207\74\0\1\u0208\46\0"+
    "\1\u0209\155\0\1\u020a\53\0\1\u020b\107\0\1\u020c\100\0"+
    "\1\u020d\66\0\1\u020e\102\0\1\u020f\104\0\1\u0210\77\0"+
    "\1\u0211\100\0\1\u0212\72\0\1\u0213\52\0\1\u0214\77\0"+
    "\1\u0215\102\0\1\u0216\134\0\1\u0217\106\0\1\u0218\37\0"+
    "\1\u0219\137\0\1\u021a\101\0\1\u021b\65\0\1\u021c\126\0"+
    "\1\u021d\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\11\11\16\1\1\11\2\1\2\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\11\0\4\1\1\11\1\1\1\11\1\1\3\11\1\1"+
    "\1\11\1\1\4\11\1\0\32\1\14\0\4\1\4\11"+
    "\32\1\14\0\2\1\1\0\37\1\1\0\12\11\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\1\0\11\1"+
    "\1\0\14\1\2\0\1\1\1\0\1\1\5\0\7\1"+
    "\1\0\1\1\1\0\12\1\1\0\2\11\1\1\5\0"+
    "\2\1\2\0\1\1\4\0\7\1\1\11\1\1\5\0"+
    "\3\1\10\0\1\1\3\0\1\1\1\11\3\0\1\11"+
    "\2\1\1\0\1\11\14\0\1\1\6\0\1\1\16\0"+
    "\1\1\3\0\3\11\4\0\1\11\12\0\1\1\26\0"+
    "\1\11\1\0\3\11\31\0\1\11\7\0\3\11\34\0"+
    "\1\11\17\0\1\11\16\0\2\11\12\0\2\11\10\0"+
    "\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[541];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
 * @return 
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { ; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 119: break;
          case 2: 
            { imprimir("Operador de soma", yytext());
            }
          case 120: break;
          case 3: 
            { imprimir("Operador de subtracao", yytext());
            }
          case 121: break;
          case 4: 
            { imprimir("Operador de multiplicacao", yytext());
            }
          case 122: break;
          case 5: 
            { imprimir("Operador de divisao", yytext());
            }
          case 123: break;
          case 6: 
            { imprimir("Operador de resto", yytext());
            }
          case 124: break;
          case 7: 
            { imprimir("Identificador", yytext());
            }
          case 125: break;
          case 8: 
            { imprimir("Operador and", yytext());
            }
          case 126: break;
          case 9: 
            { imprimir("Operador or", yytext());
            }
          case 127: break;
          case 10: 
            { imprimir("Operador xor", yytext());
            }
          case 128: break;
          case 11: 
            { imprimir("Operador de menor que", yytext());
            }
          case 129: break;
          case 12: 
            { imprimir("Operador de maior que", yytext());
            }
          case 130: break;
          case 13: 
            { imprimir("Operador de atribuicao", yytext());
            }
          case 131: break;
          case 14: 
            { imprimir("Operador de negacao", yytext());
            }
          case 132: break;
          case 15: 
            { imprimir("Caractere dois pontos", yytext());
            }
          case 133: break;
          case 16: 
            { imprimir("Caractere ponto", yytext());
            }
          case 134: break;
          case 17: 
            { imprimir("Caractere parentese esquerdo", yytext());
            }
          case 135: break;
          case 18: 
            { imprimir("Caractere parentese direito", yytext());
            }
          case 136: break;
          case 19: 
            { imprimir("Caractere chave esquerda", yytext());
            }
          case 137: break;
          case 20: 
            { imprimir("Caractere chave direita", yytext());
            }
          case 138: break;
          case 21: 
            { imprimir("Caractere colchete esquerdo", yytext());
            }
          case 139: break;
          case 22: 
            { imprimir("Caractere colchete direito", yytext());
            }
          case 140: break;
          case 23: 
            { imprimir("Caractere virgula", yytext());
            }
          case 141: break;
          case 24: 
            { imprimir("Caractere ponto e virgula", yytext());
            }
          case 142: break;
          case 25: 
            { imprimir("Caractere apostrofo", yytext());
            }
          case 143: break;
          case 26: 
            { imprimir("Número Inteiro", yytext());
            }
          case 144: break;
          case 27: 
            { imprimir("Espaço em branco", yytext());
            }
          case 145: break;
          case 28: 
            { imprimir("Número Float", yytext());
            }
          case 146: break;
          case 29: 
            { imprimir("Operador de incremento", yytext());
            }
          case 147: break;
          case 30: 
            { imprimir("Atribuicao de soma", yytext());
            }
          case 148: break;
          case 31: 
            { imprimir("Operador de decremento", yytext());
            }
          case 149: break;
          case 32: 
            { imprimir("Atribuicao de subtracao", yytext());
            }
          case 150: break;
          case 33: 
            { imprimir("Atribuicao de multiplicacao", yytext());
            }
          case 151: break;
          case 34: 
            { imprimir("Atribuicao de divisao", yytext());
            }
          case 152: break;
          case 35: 
            { imprimir("Atribuicao de resto", yytext());
            }
          case 153: break;
          case 36: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 154: break;
          case 37: 
            { imprimir("Opeerador land", yytext());
            }
          case 155: break;
          case 38: 
            { imprimir("Operador and not", yytext());
            }
          case 156: break;
          case 39: 
            { imprimir("Atribuicao de and", yytext());
            }
          case 157: break;
          case 40: 
            { imprimir("Operador lor", yytext());
            }
          case 158: break;
          case 41: 
            { imprimir("Atribuicao de or", yytext());
            }
          case 159: break;
          case 42: 
            { imprimir("Atribuicao de xor", yytext());
            }
          case 160: break;
          case 43: 
            { imprimir("Operador arrow", yytext());
            }
          case 161: break;
          case 44: 
            { imprimir("Operador shift left", yytext());
            }
          case 162: break;
          case 45: 
            { imprimir("Operador de menor igual", yytext());
            }
          case 163: break;
          case 46: 
            { imprimir("Operador shift right", yytext());
            }
          case 164: break;
          case 47: 
            { imprimir("Operador de maior igual", yytext());
            }
          case 165: break;
          case 48: 
            { imprimir("Operador de igualdade", yytext());
            }
          case 166: break;
          case 49: 
            { imprimir("Operador de diferente", yytext());
            }
          case 167: break;
          case 50: 
            { imprimir("Operador de define", yytext());
            }
          case 168: break;
          case 51: 
            { imprimir("Palavra reservada go", yytext());
            }
          case 169: break;
          case 52: 
            { imprimir("Palavra reservada map", yytext());
            }
          case 170: break;
          case 53: 
            { imprimir("Atribuicao de and not", yytext());
            }
          case 171: break;
          case 54: 
            { imprimir("Atribuicao de sl", yytext());
            }
          case 172: break;
          case 55: 
            { imprimir("Atribuicao de sr", yytext());
            }
          case 173: break;
          case 56: 
            { imprimir("Operador de elipse", yytext());
            }
          case 174: break;
          case 57: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 175: break;
          case 58: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 176: break;
          case 59: 
            { imprimir("Identificador de main", yytext());
            }
          case 177: break;
          case 60: 
            { imprimir("Palavra reservada else", yytext());
            }
          case 178: break;
          case 61: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 179: break;
          case 62: 
            { imprimir("Palavra reservada chan", yytext());
            }
          case 180: break;
          case 63: 
            { imprimir("Valor boolean", yytext());
            }
          case 181: break;
          case 64: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 182: break;
          case 65: 
            { imprimir("Palavra reservada func", yytext());
            }
          case 183: break;
          case 66: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 184: break;
          case 67: 
            { imprimir("Final do comentario", yytext());
            }
          case 185: break;
          case 68: 
            { imprimir("Inicio do comentario", yytext());
            }
          case 186: break;
          case 69: 
            { imprimir("Forrmato porcento", yytext());
            }
          case 187: break;
          case 70: 
            { imprimir("Forrmato string", yytext());
            }
          case 188: break;
          case 71: 
            { imprimir("Forrmato boolean", yytext());
            }
          case 189: break;
          case 72: 
            { imprimir("Forrmato inteiro", yytext());
            }
          case 190: break;
          case 73: 
            { imprimir("Forrmato float", yytext());
            }
          case 191: break;
          case 74: 
            { imprimir("Forrmato apontador", yytext());
            }
          case 192: break;
          case 75: 
            { imprimir("Forrmato default", yytext());
            }
          case 193: break;
          case 76: 
            { imprimir("Forrmato indefinido", yytext());
            }
          case 194: break;
          case 77: 
            { imprimir("Forrmato tipo generico", yytext());
            }
          case 195: break;
          case 78: 
            { imprimir("Palavra reservada break", yytext());
            }
          case 196: break;
          case 79: 
            { imprimir("Palavra reservada range", yytext());
            }
          case 197: break;
          case 80: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 198: break;
          case 81: 
            { imprimir("Palavra reservada defer", yytext());
            }
          case 199: break;
          case 82: 
            { imprimir("Palavra reservada import", yytext());
            }
          case 200: break;
          case 83: 
            { imprimir("Palavra reservada return", yytext());
            }
          case 201: break;
          case 84: 
            { imprimir("Palavra reservada select", yytext());
            }
          case 202: break;
          case 85: 
            { imprimir("Palavra reservada struct", yytext());
            }
          case 203: break;
          case 86: 
            { imprimir("Palavra reservada switch", yytext());
            }
          case 204: break;
          case 87: 
            { imprimir("Forrmato valor", yytext());
            }
          case 205: break;
          case 88: 
            { imprimir("Tipo de variável int", yytext());
            }
          case 206: break;
          case 89: 
            { imprimir("Palavra reservada default", yytext());
            }
          case 207: break;
          case 90: 
            { imprimir("Palavra reservada package", yytext());
            }
          case 208: break;
          case 91: 
            { imprimir("Palavra reservada EOF var", yytext());
            }
          case 209: break;
          case 92: 
            { imprimir("Palavra reservada continue", yytext());
            }
          case 210: break;
          case 93: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 211: break;
          case 94: 
            { imprimir("Tipo de variável int 8bits", yytext());
            }
          case 212: break;
          case 95: 
            { imprimir("Tipo de variável bool", yytext());
            }
          case 213: break;
          case 96: 
            { imprimir("Tipo de variável int não-definido", yytext());
            }
          case 214: break;
          case 97: 
            { imprimir("Tipo de variável int 16bits", yytext());
            }
          case 215: break;
          case 98: 
            { imprimir("Tipo de variável int 64bits", yytext());
            }
          case 216: break;
          case 99: 
            { imprimir("Tipo de variável int 32bits", yytext());
            }
          case 217: break;
          case 100: 
            { imprimir("Tipo de variável int não-definido de 8bits", yytext());
            }
          case 218: break;
          case 101: 
            { imprimir("Palavra reservada fallthrough", yytext());
            }
          case 219: break;
          case 102: 
            { imprimir("Tipo de variável string", yytext());
            }
          case 220: break;
          case 103: 
            { imprimir("Tipo de variável int não-definido de 16bits", yytext());
            }
          case 221: break;
          case 104: 
            { imprimir("Tipo de variável int não-definido de 64bits", yytext());
            }
          case 222: break;
          case 105: 
            { imprimir("Tipo de variável int não-definido de 32bits", yytext());
            }
          case 223: break;
          case 106: 
            { imprimir("Tipo de variável int ", yytext());
            }
          case 224: break;
          case 107: 
            { imprimir("Tipo de variável float 64bits", yytext());
            }
          case 225: break;
          case 108: 
            { imprimir("Tipo de variável float 32bits", yytext());
            }
          case 226: break;
          case 109: 
            { imprimir("Tipo de variável apontador", yytext());
            }
          case 227: break;
          case 110: 
            { imprimir("Tipo de variável numero complexo de 64bits", yytext());
            }
          case 228: break;
          case 111: 
            { imprimir("Tipo de variável numero complexo de 128bits", yytext());
            }
          case 229: break;
          case 112: 
            { imprimir("Tipo de variável untyped int", yytext());
            }
          case 230: break;
          case 113: 
            { imprimir("Tipo de variável untyped nil", yytext());
            }
          case 231: break;
          case 114: 
            { imprimir("Tipo de variável untyped bool", yytext());
            }
          case 232: break;
          case 115: 
            { imprimir("Tipo de variável untyped rune", yytext());
            }
          case 233: break;
          case 116: 
            { imprimir("Tipo de variável untyped float", yytext());
            }
          case 234: break;
          case 117: 
            { imprimir("Tipo de variável untyped string", yytext());
            }
          case 235: break;
          case 118: 
            { imprimir("Tipo de variável untyped complex", yytext());
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
