/* The following code was generated by JFlex 1.6.1 */

package analiseLexica;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/morgok/Desktop/Compiladores/Compiladores/src/analiseLexica/Linguagem.lex</tt>
 */
class AnalisadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\73\1\101\1\101\1\73\22\0\1\65\1\20\1\0"+
    "\1\66\1\0\1\5\1\12\1\0\1\23\1\24\1\3\1\1\1\31"+
    "\1\2\1\22\1\4\1\77\1\56\1\61\1\60\1\62\1\76\1\57"+
    "\1\76\1\55\1\76\1\21\1\32\1\15\1\17\1\16\2\0\4\100"+
    "\1\70\1\72\10\100\1\71\1\64\3\100\1\67\6\100\1\25\1\0"+
    "\1\26\1\14\1\100\1\0\1\7\1\33\1\37\1\45\1\35\1\46"+
    "\1\50\1\41\1\10\1\100\1\36\1\47\1\6\1\11\1\42\1\51"+
    "\1\100\1\34\1\40\1\43\1\44\1\54\1\52\1\63\1\53\1\100"+
    "\1\27\1\13\1\30\7\0\1\101\32\0\1\75\u05bf\0\12\74\206\0"+
    "\12\74\306\0\12\74\u019c\0\12\74\166\0\12\74\166\0\12\74\166\0"+
    "\12\74\166\0\12\74\166\0\12\74\166\0\12\74\166\0\12\74\166\0"+
    "\12\74\166\0\12\74\140\0\12\74\166\0\12\74\106\0\12\74\u0116\0"+
    "\12\74\106\0\12\74\u05e6\0\1\75\u015f\0\12\74\46\0\12\74\u012c\0"+
    "\12\74\200\0\12\74\246\0\12\74\6\0\12\74\266\0\12\74\126\0"+
    "\12\74\206\0\12\74\6\0\12\74\u03a6\0\13\75\35\0\1\101\1\101"+
    "\5\0\1\75\57\0\1\75\u0fa0\0\1\75\u761f\0\12\74\u02a6\0\12\74"+
    "\46\0\12\74\306\0\12\74\26\0\12\74\126\0\12\74\u0196\0\12\74"+
    "\u5316\0\12\74\u0586\0\12\74\u0bbc\0\12\74\200\0\12\74\74\0\12\74"+
    "\220\0\12\74\u0116\0\12\74\u01d6\0\12\74\u0176\0\12\74\146\0\12\74"+
    "\u0216\0\12\74\u5176\0\12\74\346\0\12\74\u6c74\0\62\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\13\7\1\31\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\1\37\1\40\1\41\1\42\3\7\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\0\21\7\1\62"+
    "\2\7\1\31\1\7\1\63\2\7\1\64\1\65\1\66"+
    "\1\67\17\7\1\70\3\7\1\71\1\72\6\7\1\73"+
    "\1\74\1\75\5\7\1\76\1\77\3\7\1\100\1\101"+
    "\3\7\1\102\1\0\1\103\1\7\1\104\5\7\1\105"+
    "\2\7\1\106\1\7\1\0\1\107\1\7\1\110\1\111"+
    "\1\112\4\7\1\0\1\7\1\113\1\7\1\114\1\7"+
    "\1\0\1\115\1\7\1\116\1\0\1\7\1\0\1\7"+
    "\1\0\1\117\u01e1\0\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102"+
    "\0\u07fe\0\102\0\102\0\u07fe\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0840\0\u0882\0\u08c4\0\u0210\0\102\0\u0906\0\102"+
    "\0\u0210\0\102\0\102\0\102\0\u0948\0\102\0\u098a\0\102"+
    "\0\102\0\102\0\102\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0210\0\u0fba\0\u0ffc\0\102\0\102\0\102"+
    "\0\102\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u0210\0\u141c\0\u145e\0\u14a0\0\u0210\0\u0210\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u0210\0\u0210\0\u0210\0\u166e"+
    "\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u0210\0\u0210\0\u17b8\0\u17fa"+
    "\0\u183c\0\u0210\0\u0210\0\u187e\0\u18c0\0\u1902\0\u0210\0\u1944"+
    "\0\u0210\0\u1986\0\u0210\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u0210\0\u1b12\0\u1b54\0\u0210\0\u1b96\0\u1bd8\0\u0210\0\u1c1a"+
    "\0\u0210\0\u0210\0\u0210\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u0210\0\u1de8\0\u0210\0\u1e2a\0\u1e6c\0\u0210\0\u1eae"+
    "\0\u0210\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u0210\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a"+
    "\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a"+
    "\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a"+
    "\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a"+
    "\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a"+
    "\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a"+
    "\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a"+
    "\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa"+
    "\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba"+
    "\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca"+
    "\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da"+
    "\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea"+
    "\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa"+
    "\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a"+
    "\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8\0\u5e1a"+
    "\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a"+
    "\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a"+
    "\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a"+
    "\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a"+
    "\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6\0\u6828\0\u686a"+
    "\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a"+
    "\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a"+
    "\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a"+
    "\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa"+
    "\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba"+
    "\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca"+
    "\0\u750c\0\u754e\0\u7590\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da"+
    "\0\u771c\0\u775e\0\u77a0\0\u77e2\0\u7824\0\u7866\0\u78a8\0\u78ea"+
    "\0\u792c\0\u796e\0\u79b0\0\u79f2\0\u7a34\0\u7a76\0\u7ab8\0\u7afa"+
    "\0\u7b3c\0\u7b7e\0\u7bc0\0\u7c02\0\u7c44\0\u7c86\0\u7cc8\0\u7d0a"+
    "\0\u7d4c\0\u7d8e\0\u7dd0\0\u7e12\0\u7e54\0\u7e96\0\u7ed8\0\u7f1a"+
    "\0\u7f5c\0\u7f9e\0\u7fe0\0\u8022\0\u8064\0\u80a6\0\u80e8\0\u812a"+
    "\0\u816c\0\u81ae\0\u81f0\0\u8232\0\u8274\0\u82b6\0\u82f8\0\u833a"+
    "\0\u837c\0\u83be\0\u8400\0\u8442\0\u8484\0\u84c6\0\u8508\0\u854a"+
    "\0\u858c\0\u85ce\0\u8610\0\u8652\0\u8694\0\u86d6\0\u8718\0\u875a"+
    "\0\u879c\0\u87de\0\u8820\0\u8862\0\u88a4\0\u88e6\0\u8928\0\u896a"+
    "\0\u89ac\0\u89ee\0\u8a30\0\u8a72\0\u8ab4\0\u8af6\0\u8b38\0\u8b7a"+
    "\0\u8bbc\0\u8bfe\0\u8c40\0\u8c82\0\u8cc4\0\u8d06\0\u8d48\0\u8d8a"+
    "\0\u8dcc\0\u8e0e\0\u8e50\0\u8e92\0\u8ed4\0\u8f16\0\u8f58\0\u8f9a"+
    "\0\u8fdc\0\u901e\0\u9060\0\u90a2\0\u90e4\0\u9126\0\u9168\0\u91aa"+
    "\0\u91ec\0\u922e\0\u9270\0\u92b2\0\u92f4\0\u9336\0\u9378\0\u93ba"+
    "\0\u93fc\0\u943e\0\u9480\0\u94c2\0\u9504\0\u9546\0\u9588\0\u95ca"+
    "\0\u960c\0\u964e\0\u9690\0\u96d2\0\u9714\0\u9756\0\u9798\0\u97da"+
    "\0\u981c\0\u985e\0\u98a0\0\u98e2\0\u9924\0\u9966\0\u99a8\0\u99ea"+
    "\0\u9a2c\0\u9a6e\0\u9ab0\0\u9af2\0\u9b34\0\u9b76\0\u9bb8\0\u9bfa"+
    "\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\11\1\37"+
    "\1\40\2\11\1\41\1\11\1\42\1\43\1\11\1\44"+
    "\1\45\2\11\1\46\6\47\2\11\1\50\1\2\4\11"+
    "\1\50\2\2\1\47\1\51\1\11\104\0\1\52\15\0"+
    "\1\53\2\0\1\54\32\0\6\47\13\0\1\47\1\51"+
    "\4\0\1\55\14\0\1\56\2\0\1\54\32\0\6\47"+
    "\13\0\1\47\1\51\21\0\1\57\101\0\1\60\101\0"+
    "\1\61\70\0\1\11\1\62\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\1\63\2\11\1\64\1\0\1\11\17\0\13\11\1\65"+
    "\16\11\2\0\4\11\3\0\3\11\13\0\1\66\1\0"+
    "\1\67\2\0\1\70\70\0\4\11\1\0\1\71\3\0"+
    "\1\72\13\0\32\11\2\0\4\11\3\0\3\11\20\0"+
    "\1\73\64\0\1\74\12\0\1\75\1\0\1\76\100\0"+
    "\1\77\1\100\101\0\1\101\101\0\1\102\101\0\1\103"+
    "\104\0\1\104\32\0\6\51\13\0\2\51\10\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\105\5\11\1\106\22\11"+
    "\2\0\4\11\3\0\3\11\7\0\1\11\1\107\2\11"+
    "\1\0\1\11\17\0\2\11\1\110\27\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\14\11"+
    "\1\111\15\11\2\0\4\11\3\0\3\11\7\0\1\11"+
    "\1\112\2\11\1\0\1\11\17\0\6\11\1\113\1\114"+
    "\22\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\115\5\11\1\116\6\11\1\117"+
    "\12\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\120\16\11\1\121\11\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\2\11\1\122\27\11\2\0\4\11\3\0\3\11\7\0"+
    "\1\11\1\123\2\11\1\0\1\11\17\0\7\11\1\124"+
    "\1\11\1\125\20\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\7\11\1\126\22\11\2\0"+
    "\4\11\3\0\3\11\7\0\1\11\1\127\2\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\1\11\1\130\2\11\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\23\0\1\54\32\0\6\47\13\0"+
    "\1\47\1\131\57\0\6\51\13\0\2\51\10\0\2\11"+
    "\1\132\1\11\1\0\1\11\17\0\16\11\1\133\13\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\16\11\1\134\13\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\10\11\1\135\21\11"+
    "\2\0\4\11\3\0\3\11\20\0\1\136\101\0\1\137"+
    "\101\0\1\140\104\0\1\141\65\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\142\27\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\7\11\1\143\22\11"+
    "\2\0\4\11\3\0\3\11\7\0\3\11\1\144\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\10\11\1\145\21\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\5\11\1\146\24\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\5\11\1\147\24\11\2\0"+
    "\4\11\3\0\3\11\7\0\1\11\1\150\2\11\1\0"+
    "\1\11\17\0\32\11\2\0\4\11\3\0\3\11\7\0"+
    "\3\11\1\151\1\0\1\11\17\0\32\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\14\11"+
    "\1\152\15\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\153\30\11\2\0\4\11"+
    "\3\0\3\11\7\0\2\11\1\154\1\11\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\11\11\1\155\20\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\16\11"+
    "\1\156\13\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\13\11\1\157\16\11\2\0\4\11"+
    "\3\0\3\11\7\0\4\11\1\0\1\11\17\0\14\11"+
    "\1\160\15\11\2\0\4\11\3\0\3\11\7\0\4\11"+
    "\1\0\1\11\17\0\1\11\1\161\30\11\2\0\4\11"+
    "\3\0\3\11\7\0\3\11\1\162\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\163\21\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\4\11\1\164"+
    "\25\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\165\30\11\2\0\4\11\3\0"+
    "\3\11\56\0\6\131\13\0\2\131\10\0\3\11\1\166"+
    "\1\0\1\11\17\0\32\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\7\11\1\167\22\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\170\27\11\2\0\4\11\3\0\3\11"+
    "\7\0\1\11\1\171\2\11\1\0\1\11\17\0\32\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\14\11\1\172\15\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\15\11\1\173\14\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\11\11\1\174\20\11\2\0\4\11\3\0\3\11"+
    "\7\0\4\11\1\0\1\11\17\0\2\11\1\175\27\11"+
    "\2\0\4\11\3\0\3\11\7\0\4\11\1\0\1\11"+
    "\17\0\2\11\1\176\27\11\2\0\4\11\3\0\3\11"+
    "\7\0\3\11\1\177\1\0\1\11\17\0\32\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\5\11\1\200\2\11\1\201\21\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\2\11\1\202"+
    "\27\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\11\11\1\203\20\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\204"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\205\27\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\2\11\1\206"+
    "\27\11\2\0\4\11\3\0\3\11\7\0\1\11\1\207"+
    "\2\11\1\0\1\11\17\0\2\11\1\210\27\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\5\11\1\155\6\11\1\211\15\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\4\11\1\212"+
    "\25\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\7\11\1\213\22\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\3\11\1\214"+
    "\26\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\215\30\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\1\11\1\216"+
    "\30\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\3\11\1\217\26\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\3\0\1\220\13\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\221\27\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\1\11\1\222"+
    "\30\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\223\21\11\2\0\4\11\3\0"+
    "\3\11\7\0\2\11\1\224\1\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\4\11\1\225\25\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\4\11\1\226"+
    "\25\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\4\11\1\227\25\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\11\11\1\230"+
    "\20\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\1\11\1\231\30\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\232"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\1\11\1\233"+
    "\2\11\1\0\1\11\17\0\32\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\234"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\13\11\1\235\16\11\2\0\4\11\3\0"+
    "\3\11\34\0\1\236\54\0\3\11\1\237\1\0\1\11"+
    "\17\0\32\11\2\0\4\11\3\0\3\11\7\0\3\11"+
    "\1\240\1\0\1\11\17\0\32\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\10\11\1\241"+
    "\21\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\10\11\1\242\21\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\6\11\1\243"+
    "\23\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\14\11\1\244\15\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\6\11\1\245"+
    "\23\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\15\11\1\246\14\11\2\0\4\11\3\0"+
    "\3\11\7\0\1\11\1\247\2\11\1\0\1\11\17\0"+
    "\32\11\2\0\4\11\3\0\3\11\43\0\1\250\45\0"+
    "\4\11\1\0\1\11\17\0\11\11\1\251\20\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\10\11\1\252\21\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\1\11\1\253\30\11\2\0"+
    "\4\11\3\0\3\11\7\0\4\11\1\0\1\11\17\0"+
    "\2\11\1\254\27\11\2\0\4\11\3\0\3\11\7\0"+
    "\4\11\1\0\1\11\17\0\4\11\1\255\25\11\2\0"+
    "\4\11\3\0\3\11\43\0\1\256\45\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\257\27\11\2\0\4\11\3\0"+
    "\3\11\7\0\4\11\1\0\1\11\17\0\7\11\1\260"+
    "\22\11\2\0\4\11\3\0\3\11\7\0\4\11\1\0"+
    "\1\11\17\0\2\11\1\261\27\11\2\0\4\11\3\0"+
    "\3\11\50\0\1\262\40\0\4\11\1\0\1\11\17\0"+
    "\11\11\1\263\20\11\2\0\4\11\3\0\3\11\11\0"+
    "\1\264\77\0\4\11\1\0\1\11\17\0\15\11\1\265"+
    "\14\11\2\0\4\11\3\0\3\11\12\0\1\266\76\0"+
    "\4\11\1\0\1\11\17\0\6\11\1\267\23\11\2\0"+
    "\4\11\3\0\3\11\44\0\1\270\55\0\1\271\72\0"+
    "\1\272\102\0\1\273\133\0\1\274\46\0\1\275\102\0"+
    "\1\276\133\0\1\277\113\0\1\300\43\0\1\301\72\0"+
    "\1\302\102\0\1\303\133\0\1\304\113\0\1\305\34\0"+
    "\1\306\102\0\1\307\133\0\1\310\114\0\1\311\102\0"+
    "\1\312\41\0\1\313\72\0\1\314\102\0\1\315\133\0"+
    "\1\316\114\0\1\317\102\0\1\320\32\0\1\321\102\0"+
    "\1\322\133\0\1\323\116\0\1\324\102\0\1\325\37\0"+
    "\1\326\72\0\1\327\102\0\1\330\133\0\1\331\116\0"+
    "\1\332\102\0\1\333\30\0\1\334\102\0\1\335\133\0"+
    "\1\336\115\0\1\337\104\0\1\340\36\0\1\341\72\0"+
    "\1\342\102\0\1\343\133\0\1\344\115\0\1\345\104\0"+
    "\1\346\63\0\1\347\45\0\1\350\102\0\1\351\133\0"+
    "\1\352\55\0\1\353\126\0\1\354\45\0\1\355\102\0"+
    "\1\356\133\0\1\357\102\0\1\360\45\0\1\361\102\0"+
    "\1\362\133\0\1\363\113\0\1\364\43\0\1\365\126\0"+
    "\1\366\45\0\1\367\102\0\1\370\133\0\1\371\113\0"+
    "\1\372\70\0\1\373\45\0\1\374\102\0\1\375\133\0"+
    "\1\376\114\0\1\377\102\0\1\u0100\41\0\1\u0101\126\0"+
    "\1\u0102\45\0\1\u0103\102\0\1\u0104\133\0\1\u0105\114\0"+
    "\1\u0106\102\0\1\u0107\66\0\1\u0108\45\0\1\u0109\102\0"+
    "\1\u010a\133\0\1\u010b\116\0\1\u010c\102\0\1\u010d\37\0"+
    "\1\u010e\126\0\1\u010f\45\0\1\u0110\102\0\1\u0111\133\0"+
    "\1\u0112\116\0\1\u0113\102\0\1\u0114\64\0\1\u0115\45\0"+
    "\1\u0116\102\0\1\u0117\133\0\1\u0118\115\0\1\u0119\104\0"+
    "\1\u011a\36\0\1\u011b\126\0\1\u011c\45\0\1\u011d\102\0"+
    "\1\u011e\133\0\1\u011f\115\0\1\u0120\104\0\1\u0121\63\0"+
    "\1\u0122\45\0\1\u0123\102\0\1\u0124\133\0\1\u0125\107\0"+
    "\1\u0126\73\0\1\u0127\72\0\1\u0128\64\0\1\u0129\126\0"+
    "\1\u012a\45\0\1\u012b\102\0\1\u012c\133\0\1\u012d\107\0"+
    "\1\u012e\73\0\1\u012f\72\0\1\u0130\113\0\1\u0131\102\0"+
    "\1\u0132\74\0\1\u0133\46\0\1\u0134\135\0\1\u0135\116\0"+
    "\1\u0136\102\0\1\u0137\37\0\1\u0138\130\0\1\u0139\102\0"+
    "\1\u013a\74\0\1\u013b\46\0\1\u013c\135\0\1\u013d\116\0"+
    "\1\u013e\102\0\1\u013f\66\0\1\u0140\102\0\1\u0141\74\0"+
    "\1\u0142\46\0\1\u0143\135\0\1\u0144\115\0\1\u0145\104\0"+
    "\1\u0146\36\0\1\u0147\130\0\1\u0148\102\0\1\u0149\74\0"+
    "\1\u014a\46\0\1\u014b\135\0\1\u014c\115\0\1\u014d\104\0"+
    "\1\u014e\56\0\1\u014f\104\0\1\u0150\45\0\1\u0151\144\0"+
    "\1\u0152\77\0\1\u0153\67\0\1\u0154\127\0\1\u0155\75\0"+
    "\1\u0156\104\0\1\u0157\36\0\1\u0158\121\0\1\u0159\104\0"+
    "\1\u015a\45\0\1\u015b\144\0\1\u015c\77\0\1\u015d\67\0"+
    "\1\u015e\127\0\1\u015f\75\0\1\u0160\104\0\1\u0161\56\0"+
    "\1\u0162\104\0\1\u0163\45\0\1\u0164\144\0\1\u0165\77\0"+
    "\1\u0166\67\0\1\u0167\127\0\1\u0168\74\0\1\u0169\104\0"+
    "\1\u016a\75\0\1\u016b\43\0\1\u016c\121\0\1\u016d\104\0"+
    "\1\u016e\45\0\1\u016f\144\0\1\u0170\77\0\1\u0171\67\0"+
    "\1\u0172\127\0\1\u0173\74\0\1\u0174\104\0\1\u0175\75\0"+
    "\1\u0176\64\0\1\u0177\104\0\1\u0178\72\0\1\u0179\55\0"+
    "\1\u017a\102\0\1\u017b\140\0\1\u017c\50\0\1\u017d\122\0"+
    "\1\u017e\104\0\1\u017f\72\0\1\u0180\55\0\1\u0181\102\0"+
    "\1\u0182\140\0\1\u0183\115\0\1\u0184\57\0\1\u0185\47\0"+
    "\1\u0186\102\0\1\u0187\133\0\1\u0188\73\0\1\u0189\100\0"+
    "\1\u018a\64\0\1\u018b\146\0\1\u018c\57\0\1\u018d\47\0"+
    "\1\u018e\102\0\1\u018f\133\0\1\u0190\73\0\1\u0191\100\0"+
    "\1\u0192\111\0\1\u0193\46\0\1\u0194\133\0\1\u0195\111\0"+
    "\1\u0196\77\0\1\u0197\65\0\1\u0198\111\0\1\u0199\121\0"+
    "\1\u019a\47\0\1\u019b\110\0\1\u019c\101\0\1\u019d\106\0"+
    "\1\u019e\51\0\1\u019f\126\0\1\u01a0\46\0\1\u01a1\133\0"+
    "\1\u01a2\111\0\1\u01a3\77\0\1\u01a4\65\0\1\u01a5\111\0"+
    "\1\u01a6\121\0\1\u01a7\47\0\1\u01a8\110\0\1\u01a9\101\0"+
    "\1\u01aa\106\0\1\u01ab\76\0\1\u01ac\46\0\1\u01ad\133\0"+
    "\1\u01ae\111\0\1\u01af\77\0\1\u01b0\65\0\1\u01b1\111\0"+
    "\1\u01b2\121\0\1\u01b3\24\0\1\u01b4\102\0\1\u01b5\133\0"+
    "\1\u01b6\55\0\1\u01b7\126\0\1\u01b8\46\0\1\u01b9\133\0"+
    "\1\u01ba\111\0\1\u01bb\77\0\1\u01bc\65\0\1\u01bd\111\0"+
    "\1\u01be\121\0\1\u01bf\24\0\1\u01c0\102\0\1\u01c1\133\0"+
    "\1\u01c2\102\0\1\u01c3\46\0\1\u01c4\133\0\1\u01c5\111\0"+
    "\1\u01c6\77\0\1\u01c7\65\0\1\u01c8\111\0\1\u01c9\121\0"+
    "\1\u01ca\50\0\1\u01cb\111\0\1\u01cc\46\0\1\u01cd\125\0"+
    "\1\u01ce\63\0\1\u01cf\126\0\1\u01d0\46\0\1\u01d1\133\0"+
    "\1\u01d2\111\0\1\u01d3\77\0\1\u01d4\65\0\1\u01d5\111\0"+
    "\1\u01d6\121\0\1\u01d7\50\0\1\u01d8\111\0\1\u01d9\46\0"+
    "\1\u01da\125\0\1\u01db\110\0\1\u01dc\46\0\1\u01dd\133\0"+
    "\1\u01de\111\0\1\u01df\77\0\1\u01e0\65\0\1\u01e1\111\0"+
    "\1\u01e2\121\0\1\u01e3\62\0\1\u01e4\102\0\1\u01e5\74\0"+
    "\1\u01e6\46\0\1\u01e7\135\0\1\u01e8\55\0\1\u01e9\126\0"+
    "\1\u01ea\46\0\1\u01eb\133\0\1\u01ec\111\0\1\u01ed\77\0"+
    "\1\u01ee\65\0\1\u01ef\111\0\1\u01f0\121\0\1\u01f1\62\0"+
    "\1\u01f2\102\0\1\u01f3\74\0\1\u01f4\46\0\1\u01f5\135\0"+
    "\1\u01f6\102\0\1\u01f7\46\0\1\u01f8\133\0\1\u01f9\111\0"+
    "\1\u01fa\77\0\1\u01fb\65\0\1\u01fc\111\0\1\u01fd\121\0"+
    "\1\u01fe\53\0\1\u01ff\104\0\1\u0200\45\0\1\u0201\144\0"+
    "\1\u0202\77\0\1\u0203\67\0\1\u0204\127\0\1\u0205\35\0"+
    "\1\u0206\126\0\1\u0207\46\0\1\u0208\133\0\1\u0209\111\0"+
    "\1\u020a\77\0\1\u020b\65\0\1\u020c\111\0\1\u020d\121\0"+
    "\1\u020e\53\0\1\u020f\104\0\1\u0210\45\0\1\u0211\144\0"+
    "\1\u0212\77\0\1\u0213\67\0\1\u0214\127\0\1\u0215\62\0"+
    "\1\u0216\46\0\1\u0217\133\0\1\u0218\111\0\1\u0219\77\0"+
    "\1\u021a\65\0\1\u021b\111\0\1\u021c\121\0\1\u021d\54\0"+
    "\1\u021e\104\0\1\u021f\72\0\1\u0220\55\0\1\u0221\102\0"+
    "\1\u0222\140\0\1\u0223\50\0\1\u0224\126\0\1\u0225\46\0"+
    "\1\u0226\133\0\1\u0227\111\0\1\u0228\77\0\1\u0229\65\0"+
    "\1\u022a\111\0\1\u022b\121\0\1\u022c\54\0\1\u022d\104\0"+
    "\1\u022e\72\0\1\u022f\55\0\1\u0230\102\0\1\u0231\140\0"+
    "\1\u0232\75\0\1\u0233\46\0\1\u0234\133\0\1\u0235\111\0"+
    "\1\u0236\77\0\1\u0237\65\0\1\u0238\111\0\1\u0239\121\0"+
    "\1\u023a\25\0\1\u023b\100\0\1\u023c\140\0\1\u023d\51\0"+
    "\1\u023e\126\0\1\u023f\46\0\1\u0240\133\0\1\u0241\111\0"+
    "\1\u0242\77\0\1\u0243\65\0\1\u0244\111\0\1\u0245\121\0"+
    "\1\u0246\25\0\1\u0247\100\0\1\u0248\140\0\1\u0249\37\0"+
    "\1\u024a\134\0\1\u024b\60\0\1\u024c\67\0\1\u024d\134\0"+
    "\1\u024e\46\0\1\u024f\141\0\1\u0250\53\0\1\u0251\67\0"+
    "\1\u0252\141\0\1\u0253\41\0\1\u0254\142\0\1\u0255\52\0"+
    "\1\u0256\67\0\1\u0257\142\0\1\u0258\40\0\1\u0259\137\0"+
    "\1\u025a\55\0\1\u025b\67\0\1\u025c\137\0\1\u025d\43\0"+
    "\1\u025e\150\0\1\u025f\44\0\1\u0260\67\0\1\u0261\150\0"+
    "\1\u0262\32\0\1\u0263\162\0\1\u0264\67\0\1\u0265\44\0"+
    "\1\u0266\67\0\1\u0267\162\0\1\u0268\67\0\1\u0269\32\0"+
    "\1\u026a\163\0\1\u026b\31\0\1\u026c\67\0\1\u026d\163\0"+
    "\1\u026e\17\0\1\u026f\101\0\1\u0270\113\0\1\u0271\67\0"+
    "\1\u0272\101\0\1\u0273\101\0\1\u0274\145\0\1\u0275\47\0"+
    "\1\u0276\67\0\1\u0277\145\0\1\u0278\35\0\1\u0279\157\0"+
    "\1\u027a\35\0\1\u027b\67\0\1\u027c\157\0\1\u027d\22\0"+
    "\1\u027e\100\0\1\u027f\115\0\1\u0280\66\0\1\u0281\100\0"+
    "\1\u0282\101\0\1\u0283\102\0\1\u0284\114\0\1\u0285\65\0"+
    "\1\u0286\102\0\1\u0287\165\0\1\u0288\102\0\1\u0289\102\0"+
    "\1\u028a\26\0\1\u028b\152\0\1\u028c\102\0\1\u028d\102\0"+
    "\1\u028e\10\0\2\u028f\17\0\1\u0290\32\0\6\u0291\11\0"+
    "\1\u0291\1\0\2\u0291\24\0\1\u0290\32\0\6\u0291\11\0"+
    "\1\u0291\1\0\2\u0291\57\0\6\u0292\11\0\1\u0292\1\0"+
    "\2\u0292\3\0\1\u0293\20\0\1\u0292\32\0\6\u0291\2\0"+
    "\1\u0294\5\0\1\u0294\1\u0291\1\u0294\2\u0291\1\0\1\u0294"+
    "\1\0\1\u0293\53\0\6\u0292\2\0\1\u0294\5\0\1\u0294"+
    "\1\u0292\1\u0294\2\u0292\1\0\1\u0294\1\0\2\u0295\17\0"+
    "\1\u0296\32\0\6\u0297\2\0\1\u0293\5\0\1\u0293\1\u0297"+
    "\1\u0293\2\u0297\1\0\1\u0293\1\0\1\u0293\63\0\1\u0294"+
    "\5\0\1\u0294\1\0\1\u0294\3\0\1\u0294\22\0\1\u0296"+
    "\32\0\6\u0297\11\0\1\u0297\1\0\2\u0297\57\0\6\u0298"+
    "\11\0\1\u0298\1\0\2\u0298\12\0\1\u0299\11\0\1\u0298"+
    "\32\0\6\u0297\11\0\1\u0297\1\0\2\u0297\12\0\1\u0299"+
    "\44\0\6\u0298\11\0\1\u0298\1\0\2\u0298\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39996];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\10\11\14\1\1\11\1\1\2\11"+
    "\1\0\5\11\4\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\4\11\1\0\31\1\4\11\56\1"+
    "\1\0\15\1\1\0\11\1\1\0\5\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\u01e1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalisadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 428) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext());
            }
          case 81: break;
          case 2: 
            { imprimir("Operador de soma", yytext());
            }
          case 82: break;
          case 3: 
            { imprimir("Operador de subtracao", yytext());
            }
          case 83: break;
          case 4: 
            { imprimir("Operador de multiplicacao", yytext());
            }
          case 84: break;
          case 5: 
            { imprimir("Operador de divisao", yytext());
            }
          case 85: break;
          case 6: 
            { imprimir("Operador de resto", yytext());
            }
          case 86: break;
          case 7: 
            { imprimir("Identificador", yytext());
            }
          case 87: break;
          case 8: 
            { imprimir("Operador and", yytext());
            }
          case 88: break;
          case 9: 
            { imprimir("Operador or", yytext());
            }
          case 89: break;
          case 10: 
            { imprimir("Operador xor", yytext());
            }
          case 90: break;
          case 11: 
            { imprimir("Operador de menor que", yytext());
            }
          case 91: break;
          case 12: 
            { imprimir("Operador de maior que", yytext());
            }
          case 92: break;
          case 13: 
            { imprimir("Operador de atribuicao", yytext());
            }
          case 93: break;
          case 14: 
            { imprimir("Operador de negacao", yytext());
            }
          case 94: break;
          case 15: 
            { imprimir("Caractere dois pontos", yytext());
            }
          case 95: break;
          case 16: 
            { imprimir("Caractere ponto", yytext());
            }
          case 96: break;
          case 17: 
            { imprimir("Caractere parentese esquerdo", yytext());
            }
          case 97: break;
          case 18: 
            { imprimir("Caractere parentese direito", yytext());
            }
          case 98: break;
          case 19: 
            { imprimir("Caractere chave esquerda", yytext());
            }
          case 99: break;
          case 20: 
            { imprimir("Caractere chave direita", yytext());
            }
          case 100: break;
          case 21: 
            { imprimir("Caractere colchete esquerdo", yytext());
            }
          case 101: break;
          case 22: 
            { imprimir("Caractere colchete direito", yytext());
            }
          case 102: break;
          case 23: 
            { imprimir("Caractere virgula", yytext());
            }
          case 103: break;
          case 24: 
            { imprimir("Caractere ponto e virgula", yytext());
            }
          case 104: break;
          case 25: 
            { imprimir("Número Inteiro", yytext());
            }
          case 105: break;
          case 26: 
            { imprimir("Espaço em branco", yytext());
            }
          case 106: break;
          case 27: 
            { imprimir("Número Float", yytext());
            }
          case 107: break;
          case 28: 
            { imprimir("Operador de incremento", yytext());
            }
          case 108: break;
          case 29: 
            { imprimir("Atribuicao de soma", yytext());
            }
          case 109: break;
          case 30: 
            { imprimir("Operador de decremento", yytext());
            }
          case 110: break;
          case 31: 
            { imprimir("Atribuicao de subtracao", yytext());
            }
          case 111: break;
          case 32: 
            { imprimir("Atribuicao de multiplicacao", yytext());
            }
          case 112: break;
          case 33: 
            { imprimir("Atribuicao de divisao", yytext());
            }
          case 113: break;
          case 34: 
            { imprimir("Atribuicao de resto", yytext());
            }
          case 114: break;
          case 35: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 115: break;
          case 36: 
            { imprimir("Opeerador land", yytext());
            }
          case 116: break;
          case 37: 
            { imprimir("Operador and not", yytext());
            }
          case 117: break;
          case 38: 
            { imprimir("Atribuicao de and", yytext());
            }
          case 118: break;
          case 39: 
            { imprimir("Operador lor", yytext());
            }
          case 119: break;
          case 40: 
            { imprimir("Atribuicao de or", yytext());
            }
          case 120: break;
          case 41: 
            { imprimir("Atribuicao de xor", yytext());
            }
          case 121: break;
          case 42: 
            { imprimir("Operador arrow", yytext());
            }
          case 122: break;
          case 43: 
            { imprimir("Operador shift left", yytext());
            }
          case 123: break;
          case 44: 
            { imprimir("Operador de menor igual", yytext());
            }
          case 124: break;
          case 45: 
            { imprimir("Operador shift right", yytext());
            }
          case 125: break;
          case 46: 
            { imprimir("Operador de maior igual", yytext());
            }
          case 126: break;
          case 47: 
            { imprimir("Operador de igualdade", yytext());
            }
          case 127: break;
          case 48: 
            { imprimir("Operador de diferente", yytext());
            }
          case 128: break;
          case 49: 
            { imprimir("Operador de define", yytext());
            }
          case 129: break;
          case 50: 
            { imprimir("Palavra reservada go", yytext());
            }
          case 130: break;
          case 51: 
            { imprimir("Palavra reservada map", yytext());
            }
          case 131: break;
          case 52: 
            { imprimir("Atribuicao de and not", yytext());
            }
          case 132: break;
          case 53: 
            { imprimir("Atribuicao de sl", yytext());
            }
          case 133: break;
          case 54: 
            { imprimir("Atribuicao de sr", yytext());
            }
          case 134: break;
          case 55: 
            { imprimir("Operador de elipse", yytext());
            }
          case 135: break;
          case 56: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 136: break;
          case 57: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 137: break;
          case 58: 
            { imprimir("Identificador de main", yytext());
            }
          case 138: break;
          case 59: 
            { imprimir("Palavra reservada else", yytext());
            }
          case 139: break;
          case 60: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 140: break;
          case 61: 
            { imprimir("Palavra reservada chan", yytext());
            }
          case 141: break;
          case 62: 
            { imprimir("Valor boolean", yytext());
            }
          case 142: break;
          case 63: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 143: break;
          case 64: 
            { imprimir("Palavra reservada func", yytext());
            }
          case 144: break;
          case 65: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 145: break;
          case 66: 
            { imprimir("Palavra reservada break", yytext());
            }
          case 146: break;
          case 67: 
            { imprimir("Palavra reservada range", yytext());
            }
          case 147: break;
          case 68: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 148: break;
          case 69: 
            { imprimir("Palavra reservada defer", yytext());
            }
          case 149: break;
          case 70: 
            { imprimir("Palavra reservada import", yytext());
            }
          case 150: break;
          case 71: 
            { imprimir("Palavra reservada return", yytext());
            }
          case 151: break;
          case 72: 
            { imprimir("Palavra reservada select", yytext());
            }
          case 152: break;
          case 73: 
            { imprimir("Palavra reservada struct", yytext());
            }
          case 153: break;
          case 74: 
            { imprimir("Palavra reservada switch", yytext());
            }
          case 154: break;
          case 75: 
            { imprimir("Palavra reservada default", yytext());
            }
          case 155: break;
          case 76: 
            { imprimir("Palavra reservada package", yytext());
            }
          case 156: break;
          case 77: 
            { imprimir("Palavra reservada continue", yytext());
            }
          case 157: break;
          case 78: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 158: break;
          case 79: 
            { imprimir("Palavra reservada fallthrough", yytext());
            }
          case 159: break;
          case 80: 
            { imprimir("Número Complexo", yytext());
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
